#ifndef GODOTSTEAM_H
#define GODOTSTEAM_H

/////////////////////////////////////////////////
// SILENCE STEAMWORKS WARNINGS
/////////////////////////////////////////////////
//
// Turn off MSVC-only warning about strcpy
#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS 1
#pragma warning(disable:4996)
#pragma warning(disable:4828)
#endif

/////////////////////////////////////////////////
// INCLUDE HEADERS
/////////////////////////////////////////////////
//
// Include INT types header
#include <inttypes.h>

// Include Steamworks API headers
#include "steam/steam_api.h"
#include "steam/steamnetworkingfakeip.h"
#include "steam/isteamdualsense.h"

// Include Godot headers
#include "core/object.h"
#include "scene/resources/texture.h"
#include "core/reference.h"
#include "core/dictionary.h"
#include "core/method_bind_ext.gen.inc"

// Include some system headers
#include "map"

class Steam: public Object {
	GDCLASS(Steam, Object);

	public:
		/////////////////////////////////////////
		// STEAMWORKS API ENUMS
		/////////////////////////////////////////
		//
		enum AccountType {
			ACCOUNT_TYPE_INVALID = 0, ACCOUNT_TYPE_INDIVIDUAL = 1, ACCOUNT_TYPE_MULTISEAT = 2, ACCOUNT_TYPE_GAME_SERVER = 3, ACCOUNT_TYPE_ANON_GAME_SERVER = 4, ACCOUNT_TYPE_PENDING = 5, ACCOUNT_TYPE_CONTENT_SERVER = 6, ACCOUNT_TYPE_CLAN = 7, ACCOUNT_TYPE_CHAT = 8, ACCOUNT_TYPE_CONSOLE_USER = 9, ACCOUNT_TYPE_ANON_USER = 10, ACCOUNT_TYPE_MAX = 11
		};
		enum AppOwnershipFlags {
			APP_OWNERSHIP_FLAGS_NONE = 0x0000, APP_OWNERSHIP_FLAGS_OWNS_LICENSE = 0x0001, APP_OWNERSHIP_FLAGS_FREE_LICENSE = 0x0002, APP_OWNERSHIP_FLAGS_REGION_RESTRICTED = 0x0004, APP_OWNERSHIP_FLAGS_LOW_VIOLENCE = 0x0008, APP_OWNERSHIP_FLAGS_INVALID_PLATFORM = 0x0010, APP_OWNERSHIP_FLAGS_SHARED_LICENSE = 0x0020,
			APP_OWNERSHIP_FLAGS_FREE_WEEKEND = 0x0040, APP_OWNERSHIP_FLAGS_RETAIL_LICENSE = 0x0080, APP_OWNERSHIP_FLAGS_LICENSE_LOCKED = 0x0100, APP_OWNERSHIP_FLAGS_LICENSE_PENDING = 0x0200, APP_OWNERSHIP_FLAGS_LICENSE_EXPIRED = 0x0400, APP_OWNERSHIP_FLAGS_LICENSE_PERMANENT = 0x0800, APP_OWNERSHIP_FLAGS_LICENSE_RECURRING = 0x1000,
			APP_OWNERSHIP_FLAGS_LICENSE_CANCELED = 0x2000, APP_OWNERSHIP_FLAGS_AUTO_GRANT = 0x4000, APP_OWNERSHIP_FLAGS_PENDING_GIFT = 0x8000, APP_OWNERSHIP_FLAGS_RENTAL_NOT_ACTIVATED = 0x10000, APP_OWNERSHIP_FLAGS_RENTAL = 0x20000, APP_OWNERSHIP_FLAGS_SITE_LICENSE = 0x40000
		};
		enum AppReleaseState {
			APP_RELEASE_STATE_UNKNOWN = 0, APP_RELEASE_STATE_UNAVAILABLE = 1, APP_RELEASE_STATE_PRERELEASE = 2, APP_RELEASE_STATE_PRELOAD_ONLY = 3, APP_RELEASE_STATE_RELEASED = 4
		};
		enum AppType {
			APP_TYPE_INVALID = 0x000, APP_TYPE_GAME = 0x001, APP_TYPE_APPLICATION = 0x002, APP_TYPE_TOOL = 0x004, APP_TYPE_DEMO = 0x008, APP_TYPE_MEDIA_DEPRECATED = 0x010, APP_TYPE_DLC = 0x020, APP_TYPE_GUIDE = 0x040, APP_TYPE_DRIVER = 0x080, APP_TYPE_CONFIG = 0x100, APP_TYPE_HARDWARE = 0x200, APP_TYPE_FRANCHISE = 0x400, APP_TYPE_VIDEO = 0x800,
			APP_TYPE_PLUGIN = 0x1000, APP_TYPE_MUSIC = 0x2000, APP_TYPE_SERIES = 0x4000, APP_TYPE_SHORTCUT = 0x40000000, APP_TYPE_DEPOT_ONLY = 0X80000000
		};
		enum AuthSessionResponse {
			AUTH_SESSION_RESPONSE_OK = 0, AUTH_SESSION_RESPONSE_USER_NOT_CONNECTED_TO_STEAM = 1, AUTH_SESSION_RESPONSE_NO_LICENSE_OR_EXPIRED = 2, AUTH_SESSION_RESPONSE_VAC_BANNED = 3, AUTH_SESSION_RESPONSE_LOGGED_IN_ELSEWHERE = 4, AUTH_SESSION_RESPONSE_VAC_CHECK_TIMEDOUT = 5, AUTH_SESSION_RESPONSE_AUTH_TICKET_CANCELED = 6,
			AUTH_SESSION_RESPONSE_AUTH_TICKET_INVALID_ALREADY_USED = 7, AUTH_SESSION_RESPONSE_AUTH_TICKET_INVALID = 8, AUTH_SESSION_RESPONSE_PUBLISHER_ISSUED_BAN = 9
		};
		enum BeginAuthSessionResult {
			BEGIN_AUTH_SESSION_RESULT_OK = 0, BEGIN_AUTH_SESSION_RESULT_INVALID_TICKET = 1, BEGIN_AUTH_SESSION_RESULT_DUPLICATE_REQUEST = 2, BEGIN_AUTH_SESSION_RESULT_INVALID_VERSION = 3, BEGIN_AUTH_SESSION_RESULT_GAME_MISMATCH = 4, BEGIN_AUTH_SESSION_RESULT_EXPIRED_TICKET = 5
		};
		enum BroadcastUploadResult {
			BROADCAST_UPLOAD_RESULT_NONE = 0, BROADCAST_UPLOAD_RESULT_OK = 1, BROADCAST_UPLOAD_RESULT_INIT_FAILED = 2, BROADCAST_UPLOAD_RESULT_FRAME_FAILED = 3, BROADCAST_UPLOAD_RESULT_TIME_OUT = 4, BROADCAST_UPLOAD_RESULT_BANDWIDTH_EXCEEDED = 5, BROADCAST_UPLOAD_RESULT_LOW_FPS = 6, BROADCAST_UPLOAD_RESULT_MISSING_KEYFRAMES = 7,
			BROADCAST_UPLOAD_RESULT_NO_CONNECTION = 8, BROADCAST_UPLOAD_RESULT_RELAY_FAILED = 9, BROADCAST_UPLOAD_RESULT_SETTINGS_CHANGED = 10, BROADCAST_UPLOAD_RESULT_MISSING_AUDIO = 11, BROADCAST_UPLOAD_RESULT_TOO_FAR_BEHIND = 12, BROADCAST_UPLOAD_RESULT_TRANSCODE_BEHIND = 13
		};
		enum ChatEntryType {
			CHAT_ENTRY_TYPE_INVALID = 0, CHAT_ENTRY_TYPE_CHAT_MSG = 1, CHAT_ENTRY_TYPE_TYPING = 2, CHAT_ENTRY_TYPE_INVITE_GAME = 3, CHAT_ENTRY_TYPE_EMOTE = 4, CHAT_ENTRY_TYPE_LEFT_CONVERSATION = 6, CHAT_ENTRY_TYPE_ENTERED = 7, CHAT_ENTRY_TYPE_WAS_KICKED = 8, CHAT_ENTRY_TYPE_WAS_BANNED = 9, CHAT_ENTRY_TYPE_DISCONNECTED = 10, CHAT_ENTRY_TYPE_HISTORICAL_CHAT = 11,
			CHAT_ENTRY_TYPE_LINK_BLOCKED = 14
		};
		enum ChatRoomEnterResponse {
			CHAT_ROOM_ENTER_RESPONSE_SUCCESS = 1, CHAT_ROOM_ENTER_RESPONSE_DOESNT_EXIST = 2, CHAT_ROOM_ENTER_RESPONSE_NOT_ALLOWED = 3, CHAT_ROOM_ENTER_RESPONSE_FULL = 4, CHAT_ROOM_ENTER_RESPONSE_ERROR = 5, CHAT_ROOM_ENTER_RESPONSE_BANNED = 6, CHAT_ROOM_ENTER_RESPONSE_LIMITED = 7, CHAT_ROOM_ENTER_RESPONSE_CLAN_DISABLED = 8, CHAT_ROOM_ENTER_RESPONSE_COMMUNITY_BAN = 9,
			CHAT_ROOM_ENTER_RESPONSE_MEMBER_BLOCKED_YOU = 10, CHAT_ROOM_ENTER_RESPONSE_YOU_BLOCKED_MEMBER = 11
		};
		enum ChatSteamIDInstanceFlags {
			CHAT_ACCOUNT_INSTANCE_MASK = 0X00000FFF, CHAT_INSTANCE_FLAG_CLAN = ((k_unSteamAccountInstanceMask + 1) >> 1), CHAT_INSTANCE_FLAG_LOBBY = ((k_unSteamAccountInstanceMask + 1) >> 2), CHAT_INSTANCE_FLAG_MMS_LOBBY = ((k_unSteamAccountInstanceMask + 1) >> 3)
		};
		enum DenyReason {
			DENY_INVALID = 0, DENY_INVALID_VERSION = 1, DENY_GENERIC = 2, DENY_NOT_LOGGED_ON = 3, DENY_NO_LICENSE = 4, DENY_CHEATER = 5, DENY_LOGGED_IN_ELSEWHERE = 6, DENY_UNKNOWN_TEXT = 7, DENY_INCOMPATIBLE_ANTI_CHEAT = 8, DENY_MEMORY_CORRUPTION = 9, DENY_INCOMPATIBLE_SOFTWARE = 10, DENY_STEAM_CONNECTION_LOST = 11, DENY_STEAM_CONNECTION_ERROR = 12,
			DENY_STEAM_RESPONSE_TIMED_OUT = 13, DENY_STEAM_VALIDATION_STALLED = 14, DENY_STEAM_OWNER_LEFT_GUEST_USER = 15
		};
		enum GameIDType {
			GAME_TYPE_APP = 0, GAME_TYPE_GAME_MOD = 1, GAME_TYPE_SHORTCUT = 2, GAME_TYPE_P2P = 3
		};
		enum LaunchOptionType {
			LAUNCH_OPTION_TYPE_NONE = 0, LAUNCH_OPTION_TYPE_DEFAULT = 1, LAUNCH_OPTION_TYPE_SAFE_MODE = 2, LAUNCH_OPTION_TYPE_MULTIPLAYER = 3, LAUNCH_OPTION_TYPE_CONFIG = 4, LAUNCH_OPTION_TYPE_OPEN_VR = 5, LAUNCH_OPTION_TYPE_SERVER = 6, LAUNCH_OPTION_TYPE_EDITOR = 7, LAUNCH_OPTION_TYPE_MANUAL = 8, LAUNCH_OPTION_TYPE_BENCHMARK = 9, LAUNCH_OPTION_TYPE_OPTION1 = 10,
			LAUNCH_OPTION_TYPE_OPTION2 = 11, LAUNCH_OPTION_TYPE_OPTION3 = 12, LAUNCH_OPTION_TYPE_OCULUS_VR = 13, LAUNCH_OPTION_TYPE_OPEN_VR_OVERLAY = 14, LAUNCH_OPTION_TYPE_OS_VR = 15, LAUNCH_OPTION_TYPE_DIALOG = 1000
		};
		enum MarketingMessageFlags {
			MARKETING_MESSAGE_FLAGS_NONE = 0, MARKETING_MESSAGE_FLAGS_HIGH_PRIORITY = (1<<0), MARKETING_MESSAGE_FLAGS_PLATFORM_WINDOWS = (1<<1), MARKETING_MESSAGE_FLAGS_PLATFORM_MAC = (1<<2), MARKETING_MESSAGE_FLAGS_PLATFORM_LINUX = (1<<3), MARKETING_MESSAGE_FLAGS_PLATFORM_RESTRICTIONS
		};
		enum NotificationPosition {
			POSITION_TOP_LEFT = 0, POSITION_TOP_RIGHT = 1, POSITION_BOTTOM_LEFT = 2, POSITION_BOTTOM_RIGHT = 3
		};
		enum Result {
			RESULT_OK = 1, RESULT_FAIL = 2, RESULT_NO_CONNECTION = 3, RESULT_INVALID_PASSWORD = 5, RESULT_LOGGED_IN_ELSEWHERE = 6, RESULT_INVALID_PROTOCOL_VER = 7, RESULT_INVALID_PARAM = 8, RESULT_FILE_NOT_FOUND = 9, RESULT_BUSY = 10, RESULT_INVALID_STATE = 11, RESULT_INVALID_NAME = 12, RESULT_INVALID_EMAIL = 13, RESULT_DUPLICATE_NAME = 14, RESULT_ACCESS_DENIED = 15,
			RESULT_TIMEOUT = 16, RESULT_BANNED = 17, RESULT_ACCOUNT_NOT_FOUND = 18, RESULT_INVALID_STEAM_ID = 19, RESULT_SERVICE_UNAVAILABLE = 20, RESULT_NOT_LOGGED_ON = 21, RESULT_PENDING = 22, RESULT_ENCRYPTION_FAILURE = 23, RESULT_INSUFFICIENT_PRIVILEGE = 24, RESULT_LIMIT_EXCEEDED = 25, RESULT_REVOKED = 26, RESULT_EXPIRED = 27, RESULT_ALREADY_REDEEMED = 28,
			RESULT_DUPLICATE_REQUEST = 29, RESULT_ALREADY_OWNED = 30, RESULT_IP_NOT_FOUND = 31, RESULT_PERSIST_FAILED = 32, RESULT_LOCKING_FAILED = 33, RESULT_LOG_ON_SESSION_REPLACED = 34, RESULT_CONNECT_FAILED = 35, RESULT_HANDSHAKE_FAILED = 36, RESULT_IO_FAILURE = 37, RESULT_REMOTE_DISCONNECT = 38, RESULT_SHOPPING_CART_NOT_FOUND = 39, RESULT_BLOCKED = 40,
			RESULT_IGNORED = 41, RESULT_NO_MATCH = 42, RESULT_ACCOUNT_DISABLED = 43, RESULT_SERVICE_READ_ONLY = 44, RESULT_ACCOUNT_NOT_FEATURED = 45, RESULT_ADMINISTRATOR_OK = 46, RESULT_CONTENT_VERSION = 47, RESULT_TRY_ANOTHER_CM = 48, RESULT_PASSWORD_REQUIRED_TO_KICK_SESSION = 49, RESULT_ALREADY_LOGGED_IN_ELSEWHERE = 50, RESULT_SUSPENDED = 51, RESULT_CANCELLED = 52,
			RESULT_DATA_CORRUPTION = 53, RESULT_DISK_FULL = 54, RESULT_REMOTE_CALL_FAILED = 55, RESULT_PASSWORD_UNSET = 56, RESULT_EXTERNAL_ACCOUNT_UNLINKED = 57, RESULT_PSN_TICKET_INVALID = 58, RESULT_EXTERNAL_ACCOUNT_ALREADY_LINKED = 59, RESULT_REMOTE_FILE_CONFLICT = 60, RESULT_ILLEGAL_PASSWORD = 61, RESULT_SAME_AS_PREVIOUS_VALUE = 62,
			RESULT_ACCOUNT_LOG_ON_DENIED = 63, RESULT_CANNOT_USE_OLD_PASSWORD = 64, RESULT_INVALID_LOGIN_AUTH_CODE = 65, RESULT_ACCOUNT_LOG_ON_DENIED_NO_MAIL = 66, RESULT_HARDWARE_NOT_CAPABLE_OF_IPT = 67, RESULT_IPT_INIT_ERROR = 68, RESULT_PARENTAL_CONTROL_RESTRICTED = 69, RESULT_FACEBOOK_QUERY_ERROR = 70, RESULT_EXPIRED_LOGIN_AUTH_CODE = 71,
			RESULT_IP_LOGIN_RESTRICTION_FAILED = 72, RESULT_ACCOUNT_LOCKED_DOWN = 73, RESULT_ACCOUNT_LOG_ON_DENIED_VERIFIED_EMAIL_REQUIRED = 74, RESULT_NO_MATCHING_URL = 75, RESULT_BAD_RESPONSE = 76, RESULT_REQUIRE_PASSWORD_REENTRY = 77, RESULT_VALUE_OUT_OF_RANGE = 78, RESULT_UNEXPECTED_ERROR = 79, RESULT_DISABLED = 80, RESULT_INVALID_CEG_SUBMISSION = 81,
			RESULT_RESTRICTED_DEVICE = 82, RESULT_REGION_LOCKED = 83, RESULT_RATE_LIMIT_EXCEEDED = 84, RESULT_ACCOUNT_LOGIN_DENIED_NEED_TWO_FACTOR = 85, RESULT_ITEM_DELETED = 86, RESULT_ACCOUNT_LOGIN_DENIED_THROTTLE = 87, RESULT_TWO_FACTOR_CODE_MISMATCH = 88, RESULT_TWO_FACTOR_ACTIVATION_CODE_MISMATCH = 89, RESULT_ACCOUNT_ASSOCIATED_TO_MULTIPLE_PARTNERS = 90,
			RESULT_NOT_MODIFIED = 91, RESULT_NO_MOBILE_DEVICE = 92, RESULT_TIME_NOT_SYNCED = 93, RESULT_SMS_CODE_FAILED = 94, RESULT_ACCOUNT_LIMIT_EXCEEDED = 95, RESULT_ACCOUNT_ACTIVITY_LIMIT_EXCEEDED = 96, RESULT_PHONE_ACTIVITY_LIMIT_EXCEEDED = 97, RESULT_REFUND_TO_WALLET = 98, RESULT_EMAIL_SEND_FAILURE = 99, RESULT_NOT_SETTLED = 100, RESULT_NEED_CAPTCHA = 101,
			RESULT_GSLT_DENIED = 102, RESULT_GS_OWNER_DENIED = 103, RESULT_INVALID_ITEM_TYPE = 104, RESULT_IP_BANNED = 105, RESULT_GSLT_EXPIRED = 106, RESULT_INSUFFICIENT_FUNDS = 107, RESULT_TOO_MANY_PENDING = 108
		};
		enum Universe {
			UNIVERSE_INVALID = 0, UNIVERSE_PUBLIC = 1, UNIVERSE_BETA = 2, UNIVERSE_INTERNAL = 3, UNIVERSE_DEV = 4, UNIVERSE_MAX = 5
		};
		enum UserHasLicenseForAppResult {
			USER_HAS_LICENSE_RESULT_HAS_LICENSE = 0, USER_HAS_LICENSE_RESULT_DOES_NOT_HAVE_LICENSE = 1, USER_HAS_LICENSE_RESULT_NO_AUTH = 2
		};
		enum VoiceResult {
			VOICE_RESULT_OK = 0, VOICE_RESULT_NOT_INITIALIZED = 1, VOICE_RESULT_NOT_RECORDING = 2, VOICE_RESULT_NO_DATE = 3, VOICE_RESULT_BUFFER_TOO_SMALL = 4, VOICE_RESULT_DATA_CORRUPTED = 5, VOICE_RESULT_RESTRICTED = 6
		};
		enum VRHMDType {
			VR_HMD_TYPE_NONE = -1, VR_HMD_TYPE_UNKNOWN = 0, VR_HMD_TYPE_HTC_DEV = 1, VR_HMD_TYPE_HTC_VIVEPRE = 2, VR_HMD_TYPE_HTC_VIVE = 3, VR_HMD_TYPE_HTC_UNKNOWN = 20, VR_HMD_TYPE_OCULUS_DK1 = 21, VR_HMD_TYPE_OCULUS_DK2 = 22, VR_HMD_TYPE_OCULUS_RIFT = 23, VR_HMD_TYPE_OCULUS_UNKNOWN = 40
		};

		// App enums
		enum RegisterActivationCodeResult {
			ACTIVATION_CODE_RESULT_OK = 0, ACTIVATION_CODE_RESULT_FAIL = 1, ACTIVATION_CODE_RESULT_ALREADY_REGISTERED = 2, ACTIVATION_CODE_RESULT_TIMEOUT = 3, ACTIVATION_CODE_RESULT_ALREADY_OWNED = 4
		};

		// Friends enums
		enum AvatarSizes {
			AVATAR_SMALL = 1, AVATAR_MEDIUM = 2, AVATAR_LARGE = 3
		};
		enum FriendFlags {
			FRIEND_FLAG_NONE = 0X00, FRIEND_FLAG_BLOCKED = 0X01, FRIEND_FLAG_FRIENDSHIP_REQUESTED = 0X02, FRIEND_FLAG_IMMEDIATE = 0X04, FRIEND_FLAG_CLAN_MEMBER = 0X08, FRIEND_FLAG_ON_GAME_SERVER = 0X10, FRIEND_FLAG_REQUESTING_FRIENDSHIP = 0X80, FRIEND_FLAG_REQUESTING_INFO = 0X100, FRIEND_FLAG_IGNORED = 0X200, FRIEND_FLAG_IGNORED_FRIEND = 0X400,
			FRIEND_FLAG_CHAT_MEMBER = 0X1000, FRIEND_FLAG_ALL = 0XFFFF
		};
		enum FriendRelationship {
			FRIEND_RELATION_NONE = 0, FRIEND_RELATION_BLOCKED = 1, FRIEND_RELATION_REQUEST_RECIPIENT = 2, FRIEND_RELATION_FRIEND = 3, FRIEND_RELATION_REQUEST_INITIATOR = 4,FRIEND_RELATION_IGNORED = 5, FRIEND_RELATION_IGNORED_FRIEND = 6, FRIEND_RELATION_SUGGESTED = 7, FRIEND_RELATION_MAX = 8			
		};
		enum OverlayToStoreFlag {
			OVERLAY_TO_STORE_FLAG_NONE = 0, OVERLAY_TO_STORE_FLAG_ADD_TO_CART = 1, OVERLAY_TO_STORE_FLAG_AND_TO_CART_AND_SHOW = 2
		};
		enum OverlayToWebPageMode {
			OVERLAY_TO_WEB_PAGE_MODE_DEFAULT = 0, OVERLAY_TO_WEB_PAGE_MODE_MODAL = 1
		};
		enum PersonaChange {
			PERSONA_CHANGE_NAME = 0X0001, PERSONA_CHANGE_STATUS = 0X0002, PERSONA_CHANGE_COME_ONLINE = 0X0004, PERSONA_CHANGE_GONE_OFFLINE = 0X0008, PERSONA_CHANGE_GAME_PLAYED = 0X0010, PERSONA_CHANGE_GAME_SERVER = 0X0020, PERSONA_CHANGE_AVATAR = 0X0040, PERSONA_CHANGE_JOINED_SOURCE = 0X0080, PERSONA_CHANGE_LEFT_SOURCE = 0X0100,
			PERSONA_CHANGE_RELATIONSHIP_CHANGED = 0X0200, PERSONA_CHANGE_NAME_FIRST_SET = 0X0400, PERSONA_CHANGE_FACEBOOK_INFO = 0X0800, PERSONA_CHANGE_NICKNAME = 0X1000, PERSONA_CHANGE_STEAM_LEVEL = 0X2000
		};
		enum PersonaState {
			PERSONA_STATE_OFFLINE = 0, PERSONA_STATE_ONLINE = 1, PERSONA_STATE_BUSY = 2, PERSONA_STATE_AWAY = 3, PERSONA_STATE_SNOOZE = 4, PERSONA_STATE_LOOKING_TO_TRADE = 5, PERSONA_STATE_LOOKING_TO_PLAY = 6, PERSONA_STATE_MAX = 7
		};
		enum UserRestriction {
			USER_RESTRICTION_NONE = 0, USER_RESTRICTION_UNKNOWN = 1, USER_RESTRICTION_ANY_CHAT = 2, USER_RESTRICTION_VOICE_CHAT = 4, USER_RESTRICTION_GROUP_CHAT = 8, USER_RESTRICTION_RATING = 16, USER_RESTRICTION_GAME_INVITES = 32, USER_RESTRICTION_TRADING = 64
		};
		enum CommunityProfileItemType {
			PROFILE_ITEM_TYPE_ANIMATED_AVATAR = 0, PROFILE_ITEM_TYPE_AVATAR_FRAME = 1, PROFILE_ITEM_TYPE_PROFILE_MODIFIER = 2, PROFILE_ITEM_TYPE_PROFILE_BACKGROUND = 3, PROFILE_ITEM_TYPE_MINI_PROFILE_BACKGROUND = 4
		};
		enum CommunityProfileItemProperty {
			PROFILE_ITEM_PROPERTY_IMAGE_SMALL = 0, PROFILE_ITEM_PROPERTY_IMAGE_LARGE = 1, PROFILE_ITEM_PROPERTY_INTERNAL_NAME = 2, PROFILE_ITEM_PROPERTY_TITLE = 3, PROFILE_ITEM_PROPERTY_DESCRIPTION = 4, PROFILE_ITEM_PROPERTY_APP_ID = 5, PROFILE_ITEM_PROPERTY_TYPE_ID = 6, PROFILE_ITEM_PROPERTY_CLASS = 7, PROFILE_ITEM_PROPERTY_MOVIE_WEBM = 8,
			PROFILE_ITEM_PROPERTY_MOVIE_MP4 = 9, PROFILE_ITEM_PROPERTY_MOVIE_WEBM_SMALL = 10, PROFILE_ITEM_PROPERTY_MOVIE_MP4_SMALL = 11
		};

		// Game Search enums
		enum GameSearchErrorCode {
			GAME_SEARCH_ERROR_CODE_OK = 1, GAME_SEARCH_ERROR_CODE_SEARCH_AREADY_IN_PROGRESS = 2, GAME_SEARCH_ERROR_CODE_NO_SEARCH_IN_PROGRESS = 3, GAME_SEARCH_ERROR_CODE_NOT_LOBBY_LEADER = 4, GAME_SEARCH_ERROR_CODE_NO_HOST_AVAILABLE = 5, GAME_SEARCH_ERROR_CODE_SEARCH_PARAMS_INVALID = 6, GAME_SEARCH_ERROR_CODE_OFFLINE = 7, GAME_SEARCH_ERROR_CODE_NOT_AUTHORIZED = 8,
			GAME_SEARCH_ERROR_CODE_UNKNOWN_ERROR = 9
		};
		enum PlayerResult {
			PLAYER_RESULT_FAILED_TO_CONNECT = 1, PLAYER_RESULT_ABANDONED = 2, PLAYER_RESULT_KICKED = 3, PLAYER_RESULT_INCOMPLETE = 4, PLAYER_RESULT_COMPLETED = 5
		};

		// HTMLSurface enums
		enum HTMLKeyModifiers {
			HTML_KEY_MODIFIER_NONE = 0, HTML_KEY_MODIFIER_ALT_DOWN = (1<<0), HTML_KEY_MODIFIER_CTRL_DOWN = (1<<1), HTML_KEY_MODIFIER_SHIFT_DOWN = (1<<2)
		};
		enum HTMLMouseButton {
			HTML_MOUSE_BUTTON_LEFT = 0, HTML_MOUSE_BUTTON_RIGHT = 1, HTML_MOUSE_BUTTON_MIDDLE = 2
		};
		enum MouseCursor {
			DC_USER = 0, DC_NONE = 1, DC_ARROW = 2, DC_IBEAM = 3, DC_HOUR_GLASS = 4, DC_WAIT_ARROW = 5, DC_CROSSHAIR = 6, DC_UP = 7, DC_SIZE_NW = 8, DC_SIZE_SE = 9, DC_SIZE_NE = 10, DC_SIZE_SW = 11, DC_SIZE_W = 12, DC_SIZE_E = 13, DC_SIZE_N = 14, DC_SIZE_S = 15, DC_SIZE_WE = 16, DC_SIZE_NS = 17, DC_SIZE_ALL = 18, DC_NO = 19, DC_HAND = 20, DC_BLANK = 21,
			DC_MIDDLE_PAN = 22, DC_NORTH_PAN = 23, DC_NORTH_EAST_PAN = 24, DC_EAST_PAN = 25, DC_SOUTH_EAST_PAN = 26, DC_SOUTH_PAN = 27, DC_SOUTH_WEST_PAN = 28, DC_WEST_PAN = 29, DC_NORTH_WEST_PAN = 30, DC_ALIAS = 31, DC_CELL = 32, DC_COL_RESIZE = 33, DC_COPY_CUR = 34, DC_VERTICAL_TEXT = 35, DC_ROW_RESIZE = 36, DC_ZOOM_IN = 37, DC_ZOOM_OUT = 38, DC_HELP = 39,
			DC_CUSTOM = 40, DC_LAST = 41
		};

		// HTTP enums
		enum HTTPMethod {
			HTTP_METHOD_INVALID = 0, HTTP_METHOD_GET = 1, HTTP_METHOD_HEAD = 2, HTTP_METHOD_POST = 3, HTTP_METHOD_PUT = 4, HTTP_METHOD_DELETE = 5, HTTP_METHOD_OPTIONS = 6, HTTP_METHOD_PATCH = 7
		};
		enum HTTPStatusCode {
			HTTP_STATUS_CODE_INVALID = 0, HTTP_STATUS_CODE_100_CONTINUE = 100, HTTP_STATUS_CODE_101_SWITCHING_PROTOCOLS = 101, HTTP_STATUS_CODE_200_OK = 200, HTTP_STATUS_CODE_201_CREATED = 201, HTTP_STATUS_CODE_202_ACCEPTED = 202, HTTP_STATUS_CODE_203_NON_AUTHORITATIVE = 203, HTTP_STATUS_CODE_204_NO_CONTENT = 204, HTTP_STATUS_CODE_205_RESET_CONTENT = 205,
			HTTP_STATUS_CODE_206_PARTIAL_CONTENT = 206, HTTP_STATUS_CODE_300_MULTIPLE_CHOICES = 300, HTTP_STATUS_CODE_301_MOVED_PERMANENTLY = 301, HTTP_STATUS_CODE_302_FOUND = 302, HTTP_STATUS_CODE_303_SEE_OTHER = 303, HTTP_STATUS_CODE_304_NOT_MODIFIED = 304, HTTP_STATUS_CODE_305_USE_PROXY = 305, HTTP_STATUS_CODE_307_TEMPORARY_REDIRECT = 307,
			HTTP_STATUS_CODE_400_BAD_REQUEST = 400, HTTP_STATUS_CODE_401_UNAUTHORIZED = 401, HTTP_STATUS_CODE_402_PAYMENT_REQUIRED = 402, HTTP_STATUS_CODE_403_FORBIDDEN = 403, HTTP_STATUS_CODE_404_NOT_FOUND = 404, HTTP_STATUS_CODE_405_METHOD_NOT_ALLOWED = 405, HTTP_STATUS_CODE_406_NOT_ACCEPTABLE = 406, HTTP_STATUS_CODE_407_PROXY_AUTH_REQUIRED = 407,
			HTTP_STATUS_CODE_408_REQUEST_TIMEOUT = 408, HTTP_STATUS_CODE_409_CONFLICT = 409, HTTP_STATUS_CODE_410_GONE = 410, HTTP_STATUS_CODE_411_LENGTH_REQUIRED = 411, HTTP_STATUS_CODE_412_PRECONDITION_FAILED = 412, HTTP_STATUS_CODE_413_REQUEST_ENTITY_TOO_LARGE = 413, HTTP_STATUS_CODE_414_REQUEST_URI_TOO_LONG = 414, HTTP_STATUS_CODE_415_UNSUPPORTED_MEDIA_TYPE = 415,
			HTTP_STATUS_CODE_416_REQUESTED_RANGE_NOT_SATISFIABLE = 416, HTTP_STATUS_CODE_417_EXPECTATION_FAILED = 417, HTTP_STATUS_CODE_4XX_UNKNOWN = 418, HTTP_STATUS_CODE_429_TOO_MANY_REQUESTS = 429, HTTP_STATUS_CODE_500_INTERNAL_SERVER_ERROR = 500, HTTP_STATUS_CODE_501_NOT_IMPLEMENTED = 501, HTTP_STATUS_CODE_502_BAD_GATEWAY = 502,
			HTTP_STATUS_CODE_503_SERVICE_UNAVAILABLE = 503, HTTP_STATUS_CODE_504_GATEWAY_TIMEOUT = 504, HTTP_STATUS_CODE_505_HTTP_VERSION_NOT_SUPPORTED = 505, HTTP_STATUS_CODE_5XX_UNKNOWN = 599
		};

		// Input enums
		enum InputActionOrigin {
			INPUT_ACTION_ORIGIN_NONE = 0, INPUT_ACTION_ORIGIN_A = 1, INPUT_ACTION_ORIGIN_B = 2, INPUT_ACTION_ORIGIN_X = 3, INPUT_ACTION_ORIGIN_Y = 4, INPUT_ACTION_ORIGIN_LEFT_BUMPER = 5, INPUT_ACTION_ORIGIN_RIGHT_BUMPER = 6, INPUT_ACTION_ORIGIN_LEFTGRIP = 7, INPUT_ACTION_ORIGIN_RIGHTGRIP = 8, INPUT_ACTION_ORIGIN_START = 9, INPUT_ACTION_ORIGIN_BACK = 10,
			INPUT_ACTION_ORIGIN_LEFT_PAD_TOUCH = 11, INPUT_ACTION_ORIGIN_LEFT_PAD_SWIPE = 12, INPUT_ACTION_ORIGIN_LEFT_PAD_CLICK = 13, INPUT_ACTION_ORIGIN_LEFT_PAD_DPAD_NORTH = 14, INPUT_ACTION_ORIGIN_LEFT_PAD_DPAD_SOUTH = 15, INPUT_ACTION_ORIGIN_LEFT_PAD_DPAD_WEST = 16, INPUT_ACTION_ORIGIN_LEFT_PAD_DPAD_EAST = 17, INPUT_ACTION_ORIGIN_RIGHT_PAD_TOUCH = 18,
			INPUT_ACTION_ORIGIN_RIGHT_PAD_SWIPE = 19, INPUT_ACTION_ORIGIN_RIGHT_PAD_CLICK = 20, INPUT_ACTION_ORIGIN_RIGHT_PAD_DPAD_NORTH = 21, INPUT_ACTION_ORIGIN_RIGHT_PAD_DPAD_SOUTH = 22, INPUT_ACTION_ORIGIN_RIGHT_PAD_DPAD_WEST = 23, INPUT_ACTION_ORIGIN_RIGHT_PAD_DPAD_EAST = 24, INPUT_ACTION_ORIGIN_LEFT_TRIGGER_PULL = 25, INPUT_ACTION_ORIGIN_LEFT_TRIGGER_CLICK = 26,
			INPUT_ACTION_ORIGIN_RIGHT_TRIGGER_PULL = 27, INPUT_ACTION_ORIGIN_RIGHT_TRIGGER_CLICK = 28, INPUT_ACTION_ORIGIN_LEFT_STICK_MOVE = 29, INPUT_ACTION_ORIGIN_LEFT_STICK_CLICK = 30, INPUT_ACTION_ORIGIN_LEFT_STICK_DPAD_NORTH = 31, INPUT_ACTION_ORIGIN_LEFT_STICK_DPAD_SOUTH = 32, INPUT_ACTION_ORIGIN_LEFT_STICK_DPAD_WEST = 33,
			INPUT_ACTION_ORIGIN_LEFT_STICK_DPAD_EAST = 34, INPUT_ACTION_ORIGIN_GYRO_MOVE = 35, INPUT_ACTION_ORIGIN_GYRO_PITCH = 36, INPUT_ACTION_ORIGIN_GYRO_YAW = 37, INPUT_ACTION_ORIGIN_GYRO_ROLL = 38, INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED0 = 39, INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED1 = 40, INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED2 = 41,
			INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED3 = 42, INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED4 = 43, INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED5 = 44, INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED6 = 45, INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED7 = 46, INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED8 = 47,
			INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED9 = 48, INPUT_ACTION_ORIGIN_STEAM_CONTROLLER_RESERVED10 = 49, INPUT_ACTION_ORIGIN_PS4_X = 50, INPUT_ACTION_ORIGIN_PS4_CIRCLE = 51, INPUT_ACTION_ORIGIN_PS4_TRIANGLE = 52, INPUT_ACTION_ORIGIN_PS4_SQUARE = 53, INPUT_ACTION_ORIGIN_PS4_LEFT_BUMPER = 54, INPUT_ACTION_ORIGIN_PS4_RIGHT_BUMPER = 55,
			INPUT_ACTION_ORIGIN_PS4_OPTIONS = 56, INPUT_ACTION_ORIGIN_PS4_SHARE = 57, INPUT_ACTION_ORIGIN_PS4_LEFT_PAD_TOUCH = 58, INPUT_ACTION_ORIGIN_PS4_LEFT_PAD_SWIPE = 59, INPUT_ACTION_ORIGIN_PS4_LEFT_PAD_CLICK = 60, INPUT_ACTION_ORIGIN_PS4_LEFT_PAD_DPAD_NORTH = 61, INPUT_ACTION_ORIGIN_PS4_LEFT_PAD_DPAD_SOUTH = 62, INPUT_ACTION_ORIGIN_PS4_LEFT_PAD_DPAD_WEST = 63,
			INPUT_ACTION_ORIGIN_PS4_LEFT_PAD_DPAD_EAST = 64, INPUT_ACTION_ORIGIN_PS4_RIGHT_PAD_TOUCH = 65, INPUT_ACTION_ORIGIN_PS4_RIGHT_PAD_SWIPE = 66, INPUT_ACTION_ORIGIN_PS4_RIGHT_PAD_CLICK = 67, INPUT_ACTION_ORIGIN_PS4_RIGHT_PAD_DPAD_NORTH = 68, INPUT_ACTION_ORIGIN_PS4_RIGHT_PAD_DPAD_SOUTH = 69, INPUT_ACTION_ORIGIN_PS4_RIGHT_PAD_DPAD_WEST = 70,
			INPUT_ACTION_ORIGIN_PS4_RIGHT_PAD_DPAD_EAST = 71, INPUT_ACTION_ORIGIN_PS4_CENTER_PAD_TOUCH = 72, INPUT_ACTION_ORIGIN_PS4_CENTER_PAD_SWIPE = 73, INPUT_ACTION_ORIGIN_PS4_CENTER_PAD_CLICK = 74, INPUT_ACTION_ORIGIN_PS4_CENTER_PAD_DPAD_NORTH = 75, INPUT_ACTION_ORIGIN_PS4_CENTER_PAD_DPAD_SOUTH = 76, INPUT_ACTION_ORIGIN_PS4_CENTER_PAD_DPAD_WEST = 77,
			INPUT_ACTION_ORIGIN_PS4_CENTER_PAD_DPAD_EAST = 78, INPUT_ACTION_ORIGIN_PS4_LEFT_TRIGGER_PULL = 79, INPUT_ACTION_ORIGIN_PS4_LEFT_TRIGGER_CLICK = 80, INPUT_ACTION_ORIGIN_PS4_RIGHT_TRIGGER_PULL = 81, INPUT_ACTION_ORIGIN_PS4_RIGHT_TRIGGER_CLICK = 82, INPUT_ACTION_ORIGIN_PS4_LEFT_STICK_MOVE = 83, INPUT_ACTION_ORIGIN_PS4_LEFT_STICK_CLICK = 84,
			INPUT_ACTION_ORIGIN_PS4_LEFT_STICK_DPAD_NORTH = 85, INPUT_ACTION_ORIGIN_PS4_LEFT_STICK_DPAD_SOUTH = 86, INPUT_ACTION_ORIGIN_PS4_LEFT_STICK_DPAD_WEST = 87, INPUT_ACTION_ORIGIN_PS4_LEFT_STICK_DPAD_EAST = 88, INPUT_ACTION_ORIGIN_PS4_RIGHT_STICK_MOVE = 89, INPUT_ACTION_ORIGIN_PS4_RIGHT_STICK_CLICK = 90, INPUT_ACTION_ORIGIN_PS4_RIGHT_STICK_DPAD_NORTH = 91,
			INPUT_ACTION_ORIGIN_PS4_RIGHT_STICK_DPAD_SOUTH = 92, INPUT_ACTION_ORIGIN_PS4_RIGHT_STICK_DPAD_WEST = 93, INPUT_ACTION_ORIGIN_PS4_RIGHT_STICK_DPAD_EAST = 94, INPUT_ACTION_ORIGIN_PS4_DPAD_NORTH = 95, INPUT_ACTION_ORIGIN_PS4_DPAD_SOUTH = 96, INPUT_ACTION_ORIGIN_PS4_DPAD_WEST = 97, INPUT_ACTION_ORIGIN_PS4_DPAD_EAST = 98, INPUT_ACTION_ORIGIN_PS4_GYRO_MOVE = 99,
			INPUT_ACTION_ORIGIN_PS4_GYRO_PITCH = 100, INPUT_ACTION_ORIGIN_PS4_GYRO_YAW = 101, INPUT_ACTION_ORIGIN_PS4_GYRO_ROLL = 102, INPUT_ACTION_ORIGIN_PS4_RESERVED0 = 103, INPUT_ACTION_ORIGIN_PS4_RESERVED1 = 104, INPUT_ACTION_ORIGIN_PS4_RESERVED2 = 105, INPUT_ACTION_ORIGIN_PS4_RESERVED3 = 106, INPUT_ACTION_ORIGIN_PS4_RESERVED4 = 107,
			INPUT_ACTION_ORIGIN_PS4_RESERVED5 = 108, INPUT_ACTION_ORIGIN_PS4_RESERVED6 = 109, INPUT_ACTION_ORIGIN_PS4_RESERVED7 = 110, INPUT_ACTION_ORIGIN_PS4_RESERVED8 = 111, INPUT_ACTION_ORIGIN_PS4_RESERVED9 = 112, INPUT_ACTION_ORIGIN_PS4_RESERVED10 = 113, INPUT_ACTION_ORIGIN_XBOX_ONE_A = 114, INPUT_ACTION_ORIGIN_XBOX_ONE_B = 115, INPUT_ACTION_ORIGIN_XBOX_ONE_X = 116,
			INPUT_ACTION_ORIGIN_XBOX_ONE_Y = 117, INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_BUMPER = 118, INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_BUMPER = 119, INPUT_ACTION_ORIGIN_XBOX_ONE_MENU = 120, INPUT_ACTION_ORIGIN_XBOX_ONE_VIEW = 121, INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_TRIGGER_PULL = 122, INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_TRIGGER_CLICK = 123,
			INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_TRIGGER_PULL = 124, INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_TRIGGER_CLICK = 125, INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_STICK_MOVE = 126, INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_STICK_CLICK = 127, INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_STICK_DPAD_NORTH = 128, INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_STICK_DPAD_SOUTH = 129,
			INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_STICK_DPAD_WEST = 130, INPUT_ACTION_ORIGIN_XBOX_ONE_LEFT_STICK_DPAD_EAST = 131, INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_STICK_MOVE = 132, INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_STICK_CLICK = 133, INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_STICK_DPAD_NORTH = 134, INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_STICK_DPAD_SOUTH = 135,
			INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_STICK_DPAD_WEST = 136, INPUT_ACTION_ORIGIN_XBOX_ONE_RIGHT_STICK_DPAD_EAST = 137, INPUT_ACTION_ORIGIN_XBOX_ONE_DPAD_NORTH = 138, INPUT_ACTION_ORIGIN_XBOX_ONE_DPAD_SOUTH = 139, INPUT_ACTION_ORIGIN_XBOX_ONE_DPAD_WEST = 140, INPUT_ACTION_ORIGIN_XBOX_ONE_DPAD_EAST = 141, INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED0 = 142,
			INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED1 = 143, INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED2 = 144, INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED3 = 145, INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED4 = 146, INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED5 = 147, INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED6 = 148, INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED7 = 149,
			INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED8 = 150, INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED9 = 151, INPUT_ACTION_ORIGIN_XBOX_ONE_RESERVED10 = 152, INPUT_ACTION_ORIGIN_XBOX_360_A = 153, INPUT_ACTION_ORIGIN_XBOX_360_B = 154, INPUT_ACTION_ORIGIN_XBOX_360_X = 155, INPUT_ACTION_ORIGIN_XBOX_360_Y = 156, INPUT_ACTION_ORIGIN_XBOX_360_LEFT_BUMPER = 157,
			INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_BUMPER = 158, INPUT_ACTION_ORIGIN_XBOX_360_START = 159, INPUT_ACTION_ORIGIN_XBOX_360_BACK = 160, INPUT_ACTION_ORIGIN_XBOX_360_LEFT_TRIGGER_PULL = 161, INPUT_ACTION_ORIGIN_XBOX_360_LEFT_TRIGGER_CLICK = 162, INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_TRIGGER_PULL = 163, INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_TRIGGER_CLICK = 164,
			INPUT_ACTION_ORIGIN_XBOX_360_LEFT_STICK_MOVE = 165, INPUT_ACTION_ORIGIN_XBOX_360_LEFT_STICK_CLICK = 166, INPUT_ACTION_ORIGIN_XBOX_360_LEFT_STICK_DPAD_NORTH = 167, INPUT_ACTION_ORIGIN_XBOX_360_LEFT_STICK_DPAD_SOUTH = 168, INPUT_ACTION_ORIGIN_XBOX_360_LEFT_STICK_DPAD_WEST = 169, INPUT_ACTION_ORIGIN_XBOX_360_LEFT_STICK_DPAD_EAST = 170,
			INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_STICK_MOVE = 171, INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_STICK_CLICK = 172, INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_STICK_DPAD_NORTH = 173, INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_STICK_DPAD_SOUTH = 174, INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_STICK_DPAD_WEST = 175, INPUT_ACTION_ORIGIN_XBOX_360_RIGHT_STICK_DPAD_EAST = 176,
			INPUT_ACTION_ORIGIN_XBOX_360_DPAD_NORTH = 177, INPUT_ACTION_ORIGIN_XBOX_360_DPAD_SOUTH = 178, INPUT_ACTION_ORIGIN_XBOX_360_DPAD_WEST = 179, INPUT_ACTION_ORIGIN_XBOX_360_DPAD_EAST = 180, INPUT_ACTION_ORIGIN_XBOX_360_RESERVED0 = 181, INPUT_ACTION_ORIGIN_XBOX_360_RESERVED1 = 182, INPUT_ACTION_ORIGIN_XBOX_360_RESERVED2 = 183,
			INPUT_ACTION_ORIGIN_XBOX_360_RESERVED3 = 184, INPUT_ACTION_ORIGIN_XBOX_360_RESERVED4 = 185, INPUT_ACTION_ORIGIN_XBOX_360_RESERVED5 = 186, INPUT_ACTION_ORIGIN_XBOX_360_RESERVED6 = 187, INPUT_ACTION_ORIGIN_XBOX_360_RESERVED7 = 188, INPUT_ACTION_ORIGIN_XBOX_360_RESERVED8 = 189, INPUT_ACTION_ORIGIN_XBOX_360_RESERVED9 = 190,
			INPUT_ACTION_ORIGIN_XBOX_360_RESERVED10 = 191, INPUT_ACTION_ORIGIN_SWITCH_A = 192, INPUT_ACTION_ORIGIN_SWITCH_B = 193, INPUT_ACTION_ORIGIN_SWITCH_X = 194, INPUT_ACTION_ORIGIN_SWITCH_Y = 195, INPUT_ACTION_ORIGIN_SWITCH_LEFT_BUMPER = 196, INPUT_ACTION_ORIGIN_SWITCH_RIGHT_BUMPER = 197, INPUT_ACTION_ORIGIN_SWITCH_PLUS = 198,
			INPUT_ACTION_ORIGIN_SWITCH_MINUS = 199, INPUT_ACTION_ORIGIN_SWITCH_CAPTURE = 200, INPUT_ACTION_ORIGIN_SWITCH_LEFT_TRIGGER_PULL = 201, INPUT_ACTION_ORIGIN_SWITCH_LEFT_TRIGGER_CLICK = 202, INPUT_ACTION_ORIGIN_SWITCH_RIGHT_TRIGGER_PULL = 203, INPUT_ACTION_ORIGIN_SWITCH_RIGHT_TRIGGER_CLICK = 204, INPUT_ACTION_ORIGIN_SWITCH_LEFT_STICK_MOVE = 205,
			INPUT_ACTION_ORIGIN_SWITCH_LEFT_STICK_CLICK = 206, INPUT_ACTION_ORIGIN_SWITCH_LEFT_STICK_DPAD_NORTH = 207, INPUT_ACTION_ORIGIN_SWITCH_LEFT_STICK_DPAD_SOUTH = 208, INPUT_ACTION_ORIGIN_SWITCH_LEFT_STICK_DPAD_WEST = 209, INPUT_ACTION_ORIGIN_SWITCH_LEFT_STICK_DPAD_EAST = 210, INPUT_ACTION_ORIGIN_SWITCH_RIGHT_STICK_MOVE = 211,
			INPUT_ACTION_ORIGIN_SWITCH_RIGHT_STICK_CLICK = 212, INPUT_ACTION_ORIGIN_SWITCH_RIGHT_STICK_DPAD_NORTH = 213, INPUT_ACTION_ORIGIN_SWITCH_RIGHT_STICK_DPAD_SOUTH = 214, INPUT_ACTION_ORIGIN_SWITCH_RIGHT_STICK_DPAD_WEST = 215, INPUT_ACTION_ORIGIN_SWITCH_RIGHT_STICK_DPAD_EAST = 216, INPUT_ACTION_ORIGIN_SWITCH_DPAD_NORTH = 217,
			INPUT_ACTION_ORIGIN_SWITCH_DPAD_SOUTH = 218, INPUT_ACTION_ORIGIN_SWITCH_DPAD_WEST = 219, INPUT_ACTION_ORIGIN_SWITCH_DPAD_EAST = 220, INPUT_ACTION_ORIGIN_SWITCH_PRO_GYRO_MOVE = 221, INPUT_ACTION_ORIGIN_SWITCH_PRO_GYRO_PITCH = 222, INPUT_ACTION_ORIGIN_SWITCH_PRO_GYRO_YAW = 223, INPUT_ACTION_ORIGIN_SWITCH_PRO_GYRO_ROLL = 224,
			INPUT_ACTION_ORIGIN_SWITCH_RESERVED0 = 225, INPUT_ACTION_ORIGIN_SWITCH_RESERVED1 = 226, INPUT_ACTION_ORIGIN_SWITCH_RESERVED2 = 227, INPUT_ACTION_ORIGIN_SWITCH_RESERVED3 = 228, INPUT_ACTION_ORIGIN_SWITCH_RESERVED4 = 229, INPUT_ACTION_ORIGIN_SWITCH_RESERVED5 = 230, INPUT_ACTION_ORIGIN_SWITCH_RESERVED6 = 231, INPUT_ACTION_ORIGIN_SWITCH_RESERVED7 = 232,
			INPUT_ACTION_ORIGIN_SWITCH_RESERVED8 = 233, INPUT_ACTION_ORIGIN_SWITCH_RESERVED9 = 234, INPUT_ACTION_ORIGIN_SWITCH_RESERVED10 = 235, INPUT_ACTION_ORIGIN_PS5_X = 236, INPUT_ACTION_ORIGIN_PS5_CIRCLE = 237, INPUT_ACTION_ORIGIN_PS5_TRIANGLE = 238, INPUT_ACTION_ORIGIN_PS5_SQUARE = 239, INPUT_ACTION_ORIGIN_PS5_LEFTBUMPER = 240, INPUT_ACTION_ORIGIN_PS5_RIGHTBUMPER = 241,
			INPUT_ACTION_ORIGIN_PS5_OPTION = 242, INPUT_ACTION_ORIGIN_PS5_CREATE = 243, INPUT_ACTION_ORIGIN_PS5_MUTE = 244, INPUT_ACTION_ORIGIN_PS5_LEFTPAD_TOUCH = 245, INPUT_ACTION_ORIGIN_PS5_LEFTPAD_SWIPE = 246, INPUT_ACTION_ORIGIN_PS5_LEFTPAD_CLICK = 247, INPUT_ACTION_ORIGIN_PS5_LEFTPAD_DPADNORTH = 248, INPUT_ACTION_ORIGIN_PS5_LEFTPAD_DPADSOUTH = 249,
			INPUT_ACTION_ORIGIN_PS5_LEFTPAD_DPADWEST = 250, INPUT_ACTION_ORIGIN_PS5_LEFTPAD_DPADEAST = 251, INPUT_ACTION_ORIGIN_PS5_RIGHTPAD_TOUCH = 252, INPUT_ACTION_ORIGIN_PS5_RIGHTPAD_SWIPE = 253, INPUT_ACTION_ORIGIN_PS5_RIGHTPAD_CLICK = 254, INPUT_ACTION_ORIGIN_PS5_RIGHTPAD_DPADNORTH = 255, INPUT_ACTION_ORIGIN_PS5_RIGHTPAD_DPADSOUTH = 256,
			INPUT_ACTION_ORIGIN_PS5_RIGHTPAD_DPADWEST = 257, INPUT_ACTION_ORIGIN_PS5_RIGHTPAD_DPADEAST = 258, INPUT_ACTION_ORIGIN_PS5_CENTERPAD_TOUCH = 259, INPUT_ACTION_ORIGIN_PS5_CENTERPAD_SWIPE = 260, INPUT_ACTION_ORIGIN_PS5_CENTERPAD_CLICK = 261, INPUT_ACTION_ORIGIN_PS5_CENTERPAD_DPADNORTH = 262, INPUT_ACTION_ORIGIN_PS5_CENTERPAD_DPADSOUTH = 263,
			INPUT_ACTION_ORIGIN_PS5_CENTERPAD_DPADWEST = 264, INPUT_ACTION_ORIGIN_PS5_CENTERPAD_DPADEAST = 265, INPUT_ACTION_ORIGIN_PS5_LEFTTRIGGER_PULL = 266, INPUT_ACTION_ORIGIN_PS5_LEFTTRIGGER_CLICK = 267, INPUT_ACTION_ORIGIN_PS5_RIGHTTRIGGER_PULL = 268, INPUT_ACTION_ORIGIN_PS5_RIGHTTRIGGER_CLICK = 269, INPUT_ACTION_ORIGIN_PS5_LEFTSTICK_MOVE = 270,
			INPUT_ACTION_ORIGIN_PS5_LEFTSTICK_CLICK = 271, INPUT_ACTION_ORIGIN_PS5_LEFTSTICK_DPADNORTH = 272, INPUT_ACTION_ORIGIN_PS5_LEFTSTICK_DPADSOUTH = 273, INPUT_ACTION_ORIGIN_PS5_LEFTSTICK_DPADWEST = 274, INPUT_ACTION_ORIGIN_PS5_LEFTSTICK_DPADEAST = 275, INPUT_ACTION_ORIGIN_PS5_RIGHTSTICK_MOVE = 276, INPUT_ACTION_ORIGIN_PS5_RIGHTSTICK_CLICK = 277,
			INPUT_ACTION_ORIGIN_PS5_RIGHTSTICK_DPADNORTH = 278, INPUT_ACTION_ORIGIN_PS5_RIGHTSTICK_DPADSOUTH = 279, INPUT_ACTION_ORIGIN_PS5_RIGHTSTICK_DPADWEST = 280, INPUT_ACTION_ORIGIN_PS5_RIGHTSTICK_DPADEAST = 281, INPUT_ACTION_ORIGIN_PS5_DPAD_NORTH = 282, INPUT_ACTION_ORIGIN_PS5_DPAD_SOUTH = 283, INPUT_ACTION_ORIGIN_PS5_DPAD_WEST = 284,
			INPUT_ACTION_ORIGIN_PS5_DPAD_EAST = 285, INPUT_ACTION_ORIGIN_PS5_GYRO_MOVE = 286, INPUT_ACTION_ORIGIN_PS5_GYRO_PITCH = 287, INPUT_ACTION_ORIGIN_PS5_GYRO_YAW = 288, INPUT_ACTION_ORIGIN_PS5_GYRO_ROLL = 289, INPUT_ACTION_ORIGIN_PS5_DPAD_MOVE = 290, INPUT_ACTION_ORIGIN_PS5_RESERVED1 = 291, INPUT_ACTION_ORIGIN_PS5_RESERVED2 = 292,
			INPUT_ACTION_ORIGIN_PS5_RESERVED3 = 293, INPUT_ACTION_ORIGIN_PS5_RESERVED4 = 294, INPUT_ACTION_ORIGIN_PS5_RESERVED5 = 295, INPUT_ACTION_ORIGIN_PS5_RESERVED6 = 296, INPUT_ACTION_ORIGIN_PS5_RESERVED7 = 297, INPUT_ACTION_ORIGIN_PS5_RESERVED8 = 298, INPUT_ACTION_ORIGIN_PS5_RESERVED9 = 299, INPUT_ACTION_ORIGIN_PS5_RESERVED10 = 300,
			INPUT_ACTION_ORIGIN_PS5_RESERVED11 = 301, INPUT_ACTION_ORIGIN_PS5_RESERVED12 = 302, INPUT_ACTION_ORIGIN_PS5_RESERVED13 = 303, INPUT_ACTION_ORIGIN_PS5_RESERVED14 = 304, INPUT_ACTION_ORIGIN_PS5_RESERVED15 = 305, INPUT_ACTION_ORIGIN_PS5_RESERVED16 = 306, INPUT_ACTION_ORIGIN_PS5_RESERVED17 = 307, INPUT_ACTION_ORIGIN_PS5_RESERVED18 = 308,
			INPUT_ACTION_ORIGIN_PS5_RESERVED19 = 309, INPUT_ACTION_ORIGIN_PS5_RESERVED20 = 310, INPUT_ACTION_ORIGIN_STEAMDECK_A = 311, INPUT_ACTION_ORIGIN_STEAMDECK_B = 312, INPUT_ACTION_ORIGIN_STEAMDECK_X = 313, INPUT_ACTION_ORIGIN_STEAMDECK_Y = 314, INPUT_ACTION_ORIGIN_STEAMDECK_L1 = 315, INPUT_ACTION_ORIGIN_STEAMDECK_R1 = 316, INPUT_ACTION_ORIGIN_STEAMDECK_MENU = 317,
			INPUT_ACTION_ORIGIN_STEAMDECK_VIEW = 318, INPUT_ACTION_ORIGIN_STEAMDECK_LEFTPAD_TOUCH = 319, INPUT_ACTION_ORIGIN_STEAMDECK_LEFTPAD_SWIPE = 320, INPUT_ACTION_ORIGIN_STEAMDECK_LEFTPAD_CLICK = 321, INPUT_ACTION_ORIGIN_STEAMDECK_LEFTPAD_DPADNORTH = 322, INPUT_ACTION_ORIGIN_STEAMDECK_LEFTPAD_DPADSOUTH = 323, INPUT_ACTION_ORIGIN_STEAMDECK_LEFTPAD_DPADWEST = 324,
			INPUT_ACTION_ORIGIN_STEAMDECK_LEFTPAD_DPADEAST = 325, INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTPAD_TOUCH = 326, INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTPAD_SWIPE = 327, INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTPAD_CLICK = 328, INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTPAD_DPADNORTH = 329, INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTPAD_DPADSOUTH = 330,
			INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTPAD_DPADWEST = 331, INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTPAD_DPADEAST = 332, INPUT_ACTION_ORIGIN_STEAMDECK_L2_SOFTPULL = 333, INPUT_ACTION_ORIGIN_STEAMDECK_L2 = 334, INPUT_ACTION_ORIGIN_STEAMDECK_R2_SOFTPULL = 335, INPUT_ACTION_ORIGIN_STEAMDECK_R2 = 336, INPUT_ACTION_ORIGIN_STEAMDECK_LEFTSTICK_MOVE = 337,
			INPUT_ACTION_ORIGIN_STEAMDECK_L3 = 338, INPUT_ACTION_ORIGIN_STEAMDECK_LEFTSTICK_DPADNORTH = 339, INPUT_ACTION_ORIGIN_STEAMDECK_LEFTSTICK_DPADSOUTH = 340, INPUT_ACTION_ORIGIN_STEAMDECK_LEFTSTICK_DPADWEST = 341, INPUT_ACTION_ORIGIN_STEAMDECK_LEFTSTICK_DPADEAST = 342, INPUT_ACTION_ORIGIN_STEAMDECK_LEFTSTICK_TOUCH = 343, INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTSTICK_MOVE = 344,
			INPUT_ACTION_ORIGIN_STEAMDECK_R3 = 345, INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTSTICK_DPADNORTH = 346, INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTSTICK_DPADSOUTH = 347, INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTSTICK_DPADWEST = 348, INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTSTICK_DPADEAST = 349, INPUT_ACTION_ORIGIN_STEAMDECK_RIGHTSTICK_TOUCH = 350, INPUT_ACTION_ORIGIN_STEAMDECK_L4 = 351,
			INPUT_ACTION_ORIGIN_STEAMDECK_R4 = 352, INPUT_ACTION_ORIGIN_STEAMDECK_L5 = 353, INPUT_ACTION_ORIGIN_STEAMDECK_R5 = 354, INPUT_ACTION_ORIGIN_STEAMDECK_DPAD_MOVE = 355, INPUT_ACTION_ORIGIN_STEAMDECK_DPAD_NORTH = 356, INPUT_ACTION_ORIGIN_STEAMDECK_DPAD_SOUTH = 357, INPUT_ACTION_ORIGIN_STEAMDECK_DPAD_WEST = 358, INPUT_ACTION_ORIGIN_STEAMDECK_DPAD_EAST = 359,
			INPUT_ACTION_ORIGIN_STEAMDECK_GYRO_MOVE = 360, INPUT_ACTION_ORIGIN_STEAMDECK_GYRO_PITCH = 361, INPUT_ACTION_ORIGIN_STEAMDECK_GYRO_YAW = 362, INPUT_ACTION_ORIGIN_STEAMDECK_GYRO_ROLL = 363, INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED1 = 364, INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED2 = 365, INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED3 = 366, INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED4 = 367,
			INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED5 = 368, INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED6 = 369, INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED7 = 370, INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED8 = 371, INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED9 = 372, INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED10 = 373, INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED11 = 374,
			INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED12 = 375, INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED13 = 376, INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED14 = 377, INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED15 = 378, INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED16 = 379, INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED17 = 380, INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED18 = 381,
			INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED19 = 382, INPUT_ACTION_ORIGIN_STEAMDECK_RESERVED20 = 383, INPUT_ACTION_ORIGIN_COUNT = 384, INPUT_ACTION_ORIGIN_MAXIMUMPOSSIBLEVALUE = 32767
		};
		enum SteamInputType {
			INPUT_TYPE_UNKNOWN = 0, INPUT_TYPE_STEAM_CONTROLLER = 1, INPUT_TYPE_XBOX360_CONTROLLER = 2, INPUT_TYPE_XBOXONE_CONTROLLER = 3, INPUT_TYPE_GENERIC_XINPUT = 4, INPUT_TYPE_PS4_CONTROLLER = 5, INPUT_TYPE_APPLE_MFI_CONTROLLER = 6, INPUT_TYPE_ANDROID_CONTROLLER = 7, INPUT_TYPE_SWITCH_JOYCON_PAIR = 8, INPUT_TYPE_SWITCH_JOYCON_SINGLE = 9,
			INPUT_TYPE_SWITCH_PRO_CONTROLLER = 10, INPUT_TYPE_MOBILE_TOUCH = 11, INPUT_TYPE_PS3_CONTROLLER = 12, INPUT_TYPE_PS5_CONTROLLER = 13, INPUT_TYPE_STEAM_DECK_CONTROLLER = 14, INPUT_TYPE_COUNT = 15, INPUT_TYPE_MAXIMUM_POSSIBLE_VALUE = 255
		};
		enum ConfigurationEnableType {
			INPUT_CONFIGURATION_ENABLE_TYPE_NONE = 0x0000, INPUT_CONFIGURATION_ENABLE_TYPE_PLAYSTATION = 0x0001, INPUT_CONFIGURATION_ENABLE_TYPE_XBOX = 0x0002, INPUT_CONFIGURATION_ENABLE_TYPE_GENERIC = 0x0004, INPUT_CONFIGURATION_ENABLE_TYPE_SWITCH = 0x0008
		};
		enum GlyphSize {
			INPUT_GLYPH_SIZE_SMALL = 0, INPUT_GLYPH_SIZE_MEDIUM = 1, INPUT_GLYPH_SIZE_LARGE = 2, INPUT_GLYPH_SIZE_COUNT = 3
		};
		enum GlyphStyle {
			INPUT_GLYPH_STYLE_KNOCKOUT = 0x0, INPUT_GLYPH_STYLE_LIGHT = 0x1, INPUT_GLYPH_STYLE_DARK = 0x2, INPUT_GLYPH_STYLE_NEUTRAL_COLOR_ABXY = 0x10, INPUT_GLYPH_STYLE_SOLID_ABXY = 0x20
		};
		enum SCEPadTriggerEffectMode {
			PAD_TRIGGER_EFFECT_MODE_OFF = 0, PAD_TRIGGER_EFFECT_MODE_FEEDBACK = 1, PAD_TRIGGER_EFFECT_MODE_WEAPON = 2, PAD_TRIGGER_EFFECT_MODE_VIBRATION = 3, PAD_TRIGGER_EFFECT_MODE_MULTIPLE_POSITION_FEEDBACK = 4, PAD_TRIGGER_EFFECT_MODE_SLOPE_FEEDBACK = 5, PAD_TRIGGER_EFFECT_MODE_MULTIPLE_POSITION_VIBRATION = 6
		};

		// Inventory enums
		enum SteamItemFlags {
			STEAM_ITEM_NO_TRADE = (1<<0), STEAM_ITEM_REMOVED = (1<<8), STEAM_ITEM_CONSUMED = (1<<9)
		};

		// Matchmaking enums
		enum ChatMemberStateChange {
			CHAT_MEMBER_STATE_CHANGE_ENTERED = 0x0001, CHAT_MEMBER_STATE_CHANGE_LEFT = 0x0002, CHAT_MEMBER_STATE_CHANGE_DISCONNECTED = 0x0004, CHAT_MEMBER_STATE_CHANGE_KICKED = 0x0008, CHAT_MEMBER_STATE_CHANGE_BANNED = 0x0010
		};
		enum LobbyComparison {
			LOBBY_COMPARISON_EQUAL_TO_OR_LESS_THAN = -2, LOBBY_COMPARISON_LESS_THAN = -1, LOBBY_COMPARISON_EQUAL = 0, LOBBY_COMPARISON_GREATER_THAN = 1, LOBBY_COMPARISON_EQUAL_TO_GREATER_THAN = 2, LOBBY_COMPARISON_NOT_EQUAL = 3
		};
		enum LobbyDistanceFilter {
			LOBBY_DISTANCE_FILTER_CLOSE = 0, LOBBY_DISTANCE_FILTER_DEFAULT = 1, LOBBY_DISTANCE_FILTER_FAR = 2, LOBBY_DISTANCE_FILTER_WORLDWIDE = 3
		};
		enum LobbyType {
			LOBBY_TYPE_PRIVATE = 0, LOBBY_TYPE_FRIENDS_ONLY = 1, LOBBY_TYPE_PUBLIC = 2, LOBBY_TYPE_INVISIBLE = 3
		};

		// Matchmaking Servers enums
		enum MatchMakingServerResponse {
			SERVER_RESPONDED = 0, SERVER_FAILED_TO_RESPOND = 1, NO_SERVERS_LISTED_ON_MASTER_SERVER = 2
		};

		// Music enums
		enum AudioPlaybackStatus {
			AUDIO_PLAYBACK_UNDEFINED = 0, AUDIO_PLAYBACK_PLAYING = 1, AUDIO_PLAYBACK_PAUSED = 2, AUDIO_PLAYBACK_IDLE = 3
		};

		// Networking enums
		enum P2PSend {
			P2P_SEND_UNRELIABLE = 0, P2P_SEND_UNRELIABLE_NO_DELAY = 1, P2P_SEND_RELIABLE = 2, P2P_SEND_RELIABLE_WITH_BUFFERING = 3
		};
		enum P2PSessionError {
			P2P_SESSION_ERROR_NONE = 0, P2P_SESSION_ERROR_NOT_RUNNING_APP = 1, P2P_SESSION_ERROR_NO_RIGHTS_TO_APP = 2, P2P_SESSION_ERROR_DESTINATION_NOT_LOGGED_ON = 3, P2P_SESSION_ERROR_TIMEOUT = 4, P2P_SESSION_ERROR_MAX = 5
		};
		enum SNetSocketConnectionType {
			NET_SOCKET_CONNECTION_TYPE_NOT_CONNECTED = 0, NET_SOCKET_CONNECTION_TYPE_UDP = 1, NET_SOCKET_CONNECTION_TYPE_UDP_RELAY = 2
		};
		enum SNetSocketState {
			NET_SOCKET_STATE_INVALID = 0, NET_SOCKET_STATE_CONNECTED = 1, NET_SOCKET_STATE_INITIATED = 10, NET_SOCKET_STATE_LOCAL_CANDIDATE_FOUND = 11, NET_SOCKET_STATE_RECEIVED_REMOTE_CANDIDATES = 12, NET_SOCKET_STATE_CHALLENGE_HANDSHAKE = 15, NET_SOCKET_STATE_DISCONNECTING = 21, NET_SOCKET_STATE_LOCAL_DISCONNECT = 22, NET_SOCKET_STATE_TIMEOUT_DURING_CONNECT = 23,
			NET_SOCKET_STATE_REMOTE_END_DISCONNECTED = 24, NET_SOCKET_STATE_BROKEN = 25
		};

		// Networking Sockets enums
		enum NetworkingConfigValue {
			NETWORKING_CONFIG_INVALID = 0, NETWORKING_CONFIG_FAKE_PACKET_LOSS_SEND = 2, NETWORKING_CONFIG_FAKE_PACKET_LOSS_RECV = 3, NETWORKING_CONFIG_FAKE_PACKET_LAG_SEND = 4, NETWORKING_CONFIG_FAKE_PACKET_LAG_RECV = 5, NETWORKING_CONFIG_FAKE_PACKET_REORDER_SEND = 6, NETWORKING_CONFIG_FAKE_PACKET_REORDER_RECV = 7, NETWORKING_CONFIG_FAKE_PACKET_REORDER_TIME = 8,
			NETWORKING_CONFIG_FAKE_PACKET_DUP_SEND = 26, NETWORKING_CONFIG_FAKE_PACKET_DUP_REVC = 27, NETWORKING_CONFIG_FAKE_PACKET_DUP_TIME_MAX = 28, NETWORKING_CONFIG_TIMEOUT_INITIAL = 24, NETWORKING_CONFIG_TIMEOUT_CONNECTED = 25, NETWORKING_CONFIG_SEND_BUFFER_SIZE = 9, NETWORKING_CONFIG_SEND_RATE_MIN = 10, NETWORKING_CONFIG_SEND_RATE_MAX = 11,
			NETWORKING_CONFIG_NAGLE_TIME = 12, NETWORKING_CONFIG_IP_ALLOW_WITHOUT_AUTH = 23, NETWORKING_CONFIG_SDR_CLIENT_CONSEC_PING_TIMEOUT_FAIL_INITIAL = 19, NETWORKING_CONFIG_SDR_CLIENT_CONSEC_PING_TIMEOUT_FAIL = 20, NETWORKING_CONFIG_SDR_CLIENT_MIN_PINGS_BEFORE_PING_ACCURATE = 21, NETWORKING_CONFIG_SDR_CLIENT_SINGLE_SOCKET = 22,
			NETWORKING_CONFIG_SDR_CLIENT_FORCE_RELAY_CLUSTER = 29, NETWORKING_CONFIG_SDR_CLIENT_DEBUG_TICKET_ADDRESS = 30, NETWORKING_CONFIG_SDR_CLIENT_FORCE_PROXY_ADDR = 31, NETWORKING_CONFIG_LOG_LEVEL_ACK_RTT = 13, NETWORKING_CONFIG_LOG_LEVEL_PACKET_DECODE = 14, NETWORKING_CONFIG_LOG_LEVEL_MESSAGE = 15, NETWORKING_CONFIG_LOG_LEVEL_PACKET_GAPS = 16,
			NETWORKING_CONFIG_LOG_LEVEL_P2P_RENDEZVOUS = 17, NETWORKING_CONFIG_LOG_LEVEL_SRD_RELAY_PINGS = 18
		};
		enum NetworkingGetConfigValueResult {
			NETWORKING_GET_CONFIG_VALUE_BAD_VALUE = -1, NETWORKING_GET_CONFIG_VALUE_BAD_SCOPE_OBJ = -2, NETWORKING_GET_CONFIG_VALUE_BUFFER_TOO_SMALL = -3, NETWORKING_GET_CONFIG_VALUE_OK = 1, NETWORKING_GET_CONFIG_VALUE_OK_INHERITED = 2, NETWORKING_GET_CONFIG_VALUE_FORCE_32BIT = 0x7fffffff
		};
		enum NetworkingConnectionState {
			CONNECTION_STATE_NONE = 0, CONNECTION_STATE_CONNECTING = 1, CONNECTION_STATE_FINDING_ROUTE = 2, CONNECTION_STATE_CONNECTED = 3, CONNECTION_STATE_CLOSED_BY_PEER = 4, CONNECTION_STATE_PROBLEM_DETECTED_LOCALLY = 5, CONNECTION_STATE_FIN_WAIT = -1, CONNECTION_STATE_LINGER = -2, CONNECTION_STATE_DEAD = -3, CONNECTION_STATE_FORCE32BIT = 0x7fffffff
		};
		enum NetworkingConnectionEnd {
			CONNECTION_END_INVALID = 0, CONNECTION_END_APP_MIN = 1000, CONNECTION_END_MAX = 1999, CONNECTION_END_APP_EXCEPTION_MIN = 2000, CONNECTION_END_APP_EXCEPTION_MAX = 2999, CONNECTION_END_LOCAL_MIN = 3000, CONNECTION_END_LOCAL_OFFLINE_MODE = 3001, CONNECTION_END_LOCAL_MANY_RELAY_CONNECTIVITY = 3002, CONNECTION_END_LOCAL_HOSTED_sERVER_PRIMARY_RELAY = 3003,
			CONNECTION_END_LOCAL_NETWORK_CONFIG = 3004, CONNECTION_END_LOCAL_RIGHTS = 3005, CONNECTION_END_LOCAL_MAX = 3999, CONNECTION_END_REMOVE_MIN = 4000, CONNECTION_END_REMOTE_TIMEOUT = 4001, CONNECTION_END_REMOTE_BAD_CRYPT = 4002, CONNECTION_END_REMOTE_BAD_CERT = 4003, CONNECTION_END_REMOTE_NOT_LOGGED_IN = 4004, CONNECTION_END_REMOTE_NOT_RUNNING_APP = 4005,
			CONNECTION_END_BAD_PROTOCOL_VERSION = 4006, CONNECTION_END_REMOTE_MAX = 4999, CONNECTION_END_MISC_MIN = 5000, CONNECTION_END_MISC_GENERIC = 5001, CONNECTION_END_MISC_INTERNAL_ERROR = 5002, CONNECTION_END_MISC_TIMEOUT = 5003, CONNECTION_END_MISC_RELAY_CONNECTIVITY = 5004, CONNECTION_END_MISC_STEAM_CONNECTIVITY = 5005,
			CONNECTION_END_MISC_NO_RELAY_SESSIONS_TO_CLIENT = 5006, CONNECTION_END_MISC_MAX = 5999
		};
		enum NetworkingIdentityType {
			IDENTITY_TYPE_INVALID = 0, IDENTITY_TYPE_STEAMID = 16, IDENTITY_TYPE_IP_ADDRESS = 1, IDENTITY_TYPE_GENERIC_STRING = 2, IDENTITY_TYPE_GENERIC_BYTES = 3, IDENTITY_TYPE_UNKNOWN_TYPE = 4, IDENTITY_TYPE_XBOX_PAIRWISE = 17, IDENTITY_TYPE_SONY_PSN = 18, IDENTITY_TYPE_GOOGLE_STADIA = 19, IDENTITY_TYPE_FORCE_32BIT = 0x7fffffff
		};
		enum NetworkingSocketsDebugOutputType {
			NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_NONE = 0, NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_BUG = 1, NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_ERROR = 2, NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_IMPORTANT = 3, NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_WARNING = 4, NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_MSG = 5, NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_VERBOSE = 6,
			NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_DEBUG = 7, NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_EVERYTHING = 8, NETWORKING_SOCKET_DEBUG_OUTPUT_TYPE_FORCE_32BIT = 0x7fffffff
		};

		// Networking Utils enums {
		enum NetworkingAvailability {
			NETWORKING_AVAILABILITY_CANNOT_TRY = -102, NETWORKING_AVAILABILITY_FAILED = -101, NETWORKING_AVAILABILITY_PREVIOUSLY = -100, NETWORKING_AVAILABILITY_NEVER_TRIED = 1, NETWORKING_AVAILABILITY_WAITING = 2, NETWORKING_AVAILABILITY_ATTEMPTING = 3, NETWORKING_AVAILABILITY_CURRENT = 100, NETWORKING_AVAILABILITY_UNKNOWN = 0,
			NETWORKING_AVAILABILITY_FORCE_32BIT = 0x7fffffff
		};
		enum NetworkingConfigScope {
			NETWORKING_CONFIG_SCOPE_GLOBAL = 1, NETWORKING_CONFIG_SCOPE_SOCKETS_INTERFACE = 2, NETWORKING_CONFIG_SCOPE_LISTEN_SOCKET = 3, NETWORKING_CONFIG_SCOPE_CONNECTION = 4, NETWORKING_CONFIG_SCOPE_FORCE_32BIT = 0x7fffffff
		};
		enum NetworkingConfigDataType {
			NETWORKING_CONFIG_TYPE_INT32 = 1, NETWORKING_CONFIG_TYPE_INT64 = 2, NETWORKING_CONFIG_TYPE_FLOAT = 3, NETWORKING_CONFIG_TYPE_STRING = 4, NETWORKING_CONFIG_TYPE_FUNCTION_PTR = 5, NETWORKING_CONFIG_TYPE_FORCE_32BIT = 0x7fffffff
		};

		// Parental Settings enums
		enum ParentalFeature {
			FEATURE_INVALID = 0, FEATURE_STORE = 1, FEATURE_COMMUNITY = 2, FEATURE_PROFILE = 3, FEATURE_FRIENDS = 4, FEATURE_NEWS = 5, FEATURE_TRADING = 6, FEATURE_SETTINGS = 7, FEATURE_CONSOLE = 8, FEATURE_BROWSER = 9, FEATURE_PARENTAL_SETUP = 10, FEATURE_LIBRARY = 11, FEATURE_TEST = 12, FEATURE_SITE_LICENSE = 13, FEATURE_MAX
		};

		// Steam Parties enums
		enum SteamPartyBeaconLocationType {
			STEAM_PARTY_BEACON_LOCATIONTYPE_INVALID = 0, STEAM_PARTY_BEACON_LOCATIONTYPE_CHAT_GROUP = 1, STEAM_PARTY_BEACON_LOCATION_TYPE_MAX
		};
		enum SteamPartyBeaconLocationData {
			STEAM_PARTY_BEACON_LOCATION_DATA = 0, STEAM_PARTY_BEACON_LOCATION_DATA_NAME = 1, STEAM_PARTY_BEACON_LOCATION_DATA_URL_SMALL, STEAM_PARTY_BEACON_LOCATION_DATA_URL_MEDIUM, STEAM_PARTY_BEACON_LOCATION_DATA_URL_LARGE
		};

		// Remote Storage enums
		enum RemoteStoragePlatform {
			REMOTE_STORAGE_PLATFORM_NONE = 0, REMOTE_STORAGE_PLATFORM_WINDOWS = (1<<0), REMOTE_STORAGE_PLATFORM_OSX = (1<<1), REMOTE_STORAGE_PLATFORM_PS3 = (1<<2), REMOTE_STORAGE_PLATFORM_LINUX = (1<<3), REMOTE_STORAGE_PLATFORM_RESERVED2 = (1<<4), REMOTE_STORAGE_PLATFORM_ALL = 0XFFFFFFFF
		};
		enum RemoteStoragePublishedFileVisibility {
			REMOTE_STORAGE_PUBLISHED_VISIBLITY_PUBLIC = 0, REMOTE_STORAGE_PUBLISHED_VISIBLITY_FRIENDS_ONLY = 1, REMOTE_STORAGE_PUBLISHED_VISIBLITY_PRIVATE = 2
		};
		enum UGCReadAction {
			UGC_READ_CONTINUE_READING_UNTIL_FINISHED = 0, UGC_READ_CONTINUE_READING = 1, UGC_READ_CLOSE = 2
		};
		enum WorkshopEnumerationType {
			WORKSHOP_ENUMERATION_TYPE_RANKED_BY_VOTE = 0, WORKSHOP_ENUMERATION_TYPE_RECENT = 1, WORKSHOP_ENUMERATION_TYPE_TRENDING = 2, WORKSHOP_ENUMERATION_TYPE_FAVORITES_OF_FRIENDS = 3, WORKSHOP_ENUMERATION_TYPE_VOTED_BY_FRIENDS = 4, WORKSHOP_ENUMERATION_TYPE_CONTENT_BY_FRIENDS = 5, WORKSHOP_ENUMERATION_TYPE_RECENT_FROM_FOLLOWED_USERS = 6
		};
		enum WorkshopFileAction {
			WORKSHOP_FILE_ACTION_PLAYED = 0, WORKSHOP_FILE_ACTION_COMPLETED = 1
		};
		enum WorkshopFileType {
			WORKSHOP_FILE_TYPE_FIRST = 0, WORKSHOP_FILE_TYPE_COMMUNITY = 0, WORKSHOP_FILE_TYPE_MICROTRANSACTION = 1, WORKSHOP_FILE_TYPE_COLLECTION = 2, WORKSHOP_FILE_TYPE_ART = 3, WORKSHOP_FILE_TYPE_VIDEO = 4, WORKSHOP_FILE_TYPE_SCREENSHOT = 5, WORKSHOP_FILE_TYPE_GAME = 6, WORKSHOP_FILE_TYPE_SOFTWARE = 7, WORKSHOP_FILE_TYPE_CONCEPT = 8, WORKSHOP_FILE_TYPE_WEB_GUIDE = 9,
			WORKSHOP_FILE_TYPE_INTEGRATED_GUIDE = 10, WORKSHOP_FILE_TYPE_MERCH = 11, WORKSHOP_FILE_TYPE_CONTROLLER_BINDING = 12, WORKSHOP_FILE_TYPE_STEAMWORKS_ACCESS_INVITE = 13, WORKSHOP_FILE_TYPE_STEAM_VIDEO = 14, WORKSHOP_FILE_TYPE_GAME_MANAGED_ITEM = 15, WORKSHOP_FILE_TYPE_MAX = 16
		};
		enum WorkshopVideoProvider {
			WORKSHOP_VIDEO_PROVIDER_NONE = 0, WORKSHOP_VIDEO_PROVIDER_YOUTUBE = 1
		};
		enum WorkshopVote {
			WORKSHOP_VOTE_UNVOTED = 0, WORKSHOP_VOTE_FOR = 1, WORKSHOP_VOTE_AGAINST = 2, WORKSHOP_VOTE_LATER = 3
		};
		enum LocalFileChange {
			LOCAL_FILE_CHANGE_INVALID = 0, LOCAL_FILE_CHANGE_FILE_UPDATED = 1, LOCAL_FILE_CHANGE_FILE_DELETED = 2
		};
		enum FilePathType {
			FILE_PATH_TYPE_INVALID = 0, FILE_PATH_TYPE_ABSOLUTE = 1, FILE_PATH_TYPE_API_FILENAME = 2
		};

		// Screenshot enums
		enum VRScreenshotType {
			VR_SCREENSHOT_TYPE_NONE = 0, VR_SCREENSHOT_TYPE_MONO = 1, VR_SCREENSHOT_TYPE_STEREO = 2, VR_SCREENSHOT_TYPE_MONO_CUBE_MAP = 3, VR_SCREENSHOT_TYPE_MONO_PANORAMA = 4, VR_SCREENSHOT_TYPE_STEREO_PANORAMA = 5
		};

		// UGC enums
		enum ItemPreviewType {
			ITEM_PREVIEW_TYPE_IMAGE = 0, ITEM_PREVIEW_TYPE_YOUTUBE_VIDEO = 1, ITEM_PREVIEW_TYPE_SKETCHFAB = 2, ITEM_PREVIEW_TYPE_ENVIRONMENTMAP_HORIZONTAL_CROSS = 3, ITEM_PREVIEW_TYPE_ENVIRONMENTMAP_LAT_LONG = 4, ITEM_PREVIEW_TYPE_RESERVED_MAX = 255
		};
		enum ItemState {
			ITEM_STATE_NONE = 0, ITEM_STATE_SUBSCRIBED = 1, ITEM_STATE_LEGACY_ITEM = 2, ITEM_STATE_INSTALLED = 4, ITEM_STATE_NEEDS_UPDATE = 8, ITEM_STATE_DOWNLOADING = 16, ITEM_STATE_DOWNLOAD_PENDING = 32
		};
		enum ItemStatistic {
			ITEM_STATISTIC_NUM_SUBSCRIPTIONS = 0, ITEM_STATISTIC_NUM_FAVORITES = 1, ITEM_STATISTIC_NUM_FOLLOWERS = 2, ITEM_STATISTIC_NUM_UNIQUE_SUBSCRIPTIONS = 3, ITEM_STATISTIC_NUM_UNIQUE_FAVORITES = 4, ITEM_STATISTIC_NUM_UNIQUE_FOLLOWERS = 5, ITEM_STATISTIC_NUM_UNIQUE_WEBSITE_VIEWS = 6, ITEM_STATISTIC_REPORT_SCORE = 7, ITEM_STATISTIC_NUM_SECONDS_PLAYED = 8,
			ITEM_STATISTIC_NUM_PLAYTIME_SESSIONS = 9, ITEM_STATISTIC_NUM_COMMENTS = 10, ITEM_STATISTIC_NUM_SECONDS_PLAYED_DURING_TIME_PERIOD = 11, ITEM_STATISTIC_NUM_PLAYTIME_SESSIONS_DURING_TIME_PERIOD = 12
		};
		enum ItemUpdateStatus {
			ITEM_UPDATE_STATUS_INVALID = 0, ITEM_UPDATE_STATUS_PREPARING_CONFIG = 1, ITEM_UPDATE_STATUS_PREPARING_CONTENT = 2, ITEM_UPDATE_STATUS_UPLOADING_CONTENT = 3, ITEM_UPDATE_STATUS_UPLOADING_PREVIEW_FILE = 4, ITEM_UPDATE_STATUS_COMMITTING_CHANGES = 5
		};
		enum UGCMatchingUGCType {
			UGC_MATCHINGUGCTYPE_ITEMS = 0, UGC_MATCHING_UGC_TYPE_ITEMS_MTX = 1, UGC_MATCHING_UGC_TYPE_ITEMS_READY_TO_USE = 2, UGC_MATCHING_UGC_TYPE_COLLECTIONS = 3, UGC_MATCHING_UGC_TYPE_ARTWORK = 4, UGC_MATCHING_UGC_TYPE_VIDEOS = 5, UGC_MATCHING_UGC_TYPE_SCREENSHOTS = 6, UGC_MATCHING_UGC_TYPE_ALL_GUIDES = 7, UGC_MATCHING_UGC_TYPE_WEB_GUIDES = 8,
			UGC_MATCHING_UGC_TYPE_INTEGRATED_GUIDES = 9, UGC_MATCHING_UGC_TYPE_USABLE_IN_GAME = 10, UGC_MATCHING_UGC_TYPE_CONTROLLER_BINDINGS = 11, UGC_MATCHING_UGC_TYPE_GAME_MANAGED_ITEMS = 12, UGC_MATCHING_UGC_TYPE_ALL = ~0
		};
		enum UGCQuery {
			UGC_QUERY_RANKED_BY_VOTE = 0, UGC_QUERY_RANKED_BY_PUBLICATION_DATE = 1, UGC_QUERY_ACCEPTED_FOR_GAME_RANKED_BY_ACCEPTANCE_DATE = 2, UGC_QUERY_RANKED_BY_TREND = 3, UGC_QUERY_FAVORITED_BY_FRIENDS_RANKED_BY_PUBLICATION_DATE = 4, UGC_QUERY_CREATED_BY_FRIENDS_RANKED_BY_PUBLICATION_DATE = 5, UGC_QUERY_RANKED_BY_NUM_TIMES_REPORTED = 6,
			UGC_QUERY_CREATED_BY_FOLLOWED_USERS_RANKED_BY_PUBLICATION_DATE = 7, UGC_QUERY_NOT_YET_RATED = 8, UGC_QUERY_RANKED_BY_TOTAL_VOTES_ASC = 9, UGC_QUERY_RANKED_BY_VOTES_UP = 10, UGC_QUERY_RANKED_BY_TEXT_SEARCH = 11, UGC_QUERY_RANKED_BY_TOTAL_UNIQUE_SUBSCRIPTIONS = 12, UGC_QUERY_RANKED_BY_PLAYTIME_TREND = 13, UGC_QUERY_RANKED_BY_TOTAL_PLAYTIME = 14,
			UGC_QUERY_RANKED_BY_AVERAGE_PLAYTIME_TREND = 15, UGC_QUERY_RANKED_BY_LIFETIME_AVERAGE_PLAYTIME = 16, UGC_QUERY_RANKED_BY_PLAYTIME_SESSIONS_TREND = 17, UGC_QUERY_RANKED_BY_LIFETIME_PLAYTIME_SESSIONS = 18, UGC_QUERY_RANKED_BY_LAST_UPDATED_DATE = 19
		};
		enum UserUGCList {
			USER_UGC_LIST_PUBLISHED = 0, USER_UGC_LIST_VOTED_ON = 1, USER_UGC_LIST_VOTED_UP = 2, USER_UGC_LIST_VOTED_DOWN = 3, USER_UGC_LIST_FAVORITED = 5, USER_UGC_LIST_SUBSCRIBED = 6, USER_UGC_LIST_USED_OR_PLAYED = 7, USER_UGC_LIST_FOLLOWED = 8
		};
		enum UserUGCListSortOrder {
			USERUGCLISTSORTORDER_CREATIONORDERDESC = 0, USERUGCLISTSORTORDER_CREATIONORDERASC = 1, USERUGCLISTSORTORDER_TITLEASC = 2, USERUGCLISTSORTORDER_LASTUPDATEDDESC = 3, USERUGCLISTSORTORDER_SUBSCRIPTIONDATEDESC = 4, USERUGCLISTSORTORDER_VOTESCOREDESC = 5, USERUGCLISTSORTORDER_FORMODERATION = 6
		};

		// User enums
		enum FailureType {
			FAILURE_FLUSHED_CALLBACK_QUEUE = 0, FAILURE_PIPE_FAIL = 1
		};
		enum DurationControlProgress {
			DURATION_CONTROL_PROGRESS_FULL = 0, DURATION_CONTROL_PROGRESS_HALF = 1, DURATION_CONTROL_PROGRESS_NONE = 2
		};
		enum DurationControlNotification {
			DURATION_CONTROL_NOTIFICATION_NONE = 0, DURATION_CONTROL_NOTIFICATION_1_HOUR = 1, DURATION_CONTROL_NOTIFICATION_3_HOURS = 3, DURATION_CONTROL_NOTIFICATION_HALF_PROGRESS = 3, DURATION_CONTROL_NOTIFICATION_NO_PROGRESS = 4
		};

		// User Stats enums
		enum LeaderboardDataRequest {
			LEADERBOARD_DATA_REQUEST_GLOBAL = 0, LEADERBOARD_DATA_REQUEST_GLOBAL_AROUND_USER = 1, LEADERBOARD_DATA_REQUEST_FRIENDS = 2, LEADERBOARD_DATA_REQUEST_USERS = 3
		};
		enum LeaderboardDisplayType {
			LEADERBOARD_DISPLAY_TYPE_NONE = 0, LEADERBOARD_DISPLAY_TYPE_NUMERIC = 1, LEADERBOARD_DISPLAY_TYPE_TIME_SECONDS = 2, LEADERBOARD_DISPLAY_TYPE_TIME_MILLISECONDS = 3
		};
		enum LeaderboardSortMethod {
			LEADERBOARD_SORT_METHOD_NONE = 0, LEADERBOARD_SORT_METHOD_ASCENDING = 1, LEADERBOARD_SORT_METHOD_DESCENDING = 2
		};
		enum LeaderboardUploadScoreMethod {
			LEADERBOARD_UPLOAD_SCORE_METHOD = 0, LEADERBOARD_UPLOAD_SCORE_METHOD_KEEP_BEST = 1, LEADERBOARD_UPLOAD_SCORE_METHOD_FORCE_UPDATE = 2
		};
		enum SteamUserStatType {
			STEAM_USER_STAT_TYPE_INVALID = 0, STEAM_USER_STAT_TYPE_INT = 1, STEAM_USER_STAT_TYPE_FLOAT = 2, STEAM_USER_STAT_TYPE_AVGRATE = 3, STEAM_USER_STAT_TYPE_ACHIEVEMENTS = 4, STEAM_USER_STAT_TYPE_GROUPACHIEVEMENTS = 5, STEAM_USER_STAT_TYPE_MAX = 6
		};

		// Utils enums
		enum CheckFileSignature {
			CHECK_FILE_SIGNATURE_INVALID_SIGNATURE = 0, CHECK_FILE_SIGNATURE_VALID_SIGNATURE = 1, CHECK_FILE_SIGNATURE_FILE_NOT_FOUND = 2, CHECK_FILE_SIGNATURE_NO_SIGNATURES_FOUND_FOR_THIS_APP = 3, CHECK_FILE_SIGNATURE_NO_SIGNATURES_FOUND_FOR_THIS_FILE = 4
		};
		enum GamepadTextInputLineMode {
			GAMEPAD_TEXT_INPUT_LINE_MODE_SINGLE_LINE = 0, GAMEPAD_TEXT_INPUT_LINE_MODE_MULTIPLE_LINES = 1
		};
		enum GamepadTextInputMode {
			GAMEPAD_TEXT_INPUT_MODE_NORMAL = 0, GAMEPAD_TEXT_INPUT_MODE_PASSWORD = 1
		};
		enum FloatingGamepadTextInputMode {
			FLOATING_GAMEPAD_TEXT_INPUT_MODE_SINGLE_LINE = 0, FLOATING_GAMEPAD_TEXT_INPUT_MODE_MULTIPLE_LINES = 1, FLOATING_GAMEPAD_TEXT_INPUT_MODE_EMAIL = 2, FLOATING_GAMEPAD_TEXT_INPUT_MODE_NUMERIC = 3,
		};
		enum SteamAPICallFailure {
			STEAM_API_CALL_FAILURE_NONE = -1, STEAM_API_CALL_FAILURE_STEAM_GONE = 0, STEAM_API_CALL_FAILURE_NETWORK_FAILURE = 1, STEAM_API_CALL_FAILURE_INVALID_HANDLE = 2, STEAM_API_CALL_FAILURE_MISMATCHED_CALLBACK = 3
		};
		enum TextFilteringContext {
			TEXT_FILTERING_CONTEXT_UNKNOWN = 0, TEXT_FILTERING_CONTEXT_GAME_CONTENT = 1, TEXT_FILTERING_CONTEXT_CHAT = 2, TEXT_FILTERING_CONTEXT_NAME = 3
		};
		
		static Steam* get_singleton();
		Steam();
		~Steam();


		/////////////////////////////////////////
		// STEAMWORKS FUNCTIONS
		/////////////////////////////////////////
		//
		CSteamID createSteamID(uint64_t steam_id, int account_type = -1);

		// Main /////////////////////////////////
		bool restartAppIfNecessary(uint32 app_id);
		Dictionary steamInit(bool retrieve_stats = true);
		bool isSteamRunning();
		void steamworksError(const String& failed_signal);

		// Apps /////////////////////////////////
		Array getDLCDataByIndex();
		bool isAppInstalled(uint32_t app_id);
		bool isCybercafe();
		bool isDLCInstalled(uint32_t dlc_id);
		bool isLowViolence();
		bool isSubscribed();
		bool isSubscribedApp(uint32_t app_id);
		bool isSubscribedFromFamilySharing();
		bool isSubscribedFromFreeWeekend();
		Dictionary isTimedTrial();
		bool isVACBanned();
		int getAppBuildId();
		String getAppInstallDir(uint32_t app_id);
		uint64_t getAppOwner();
		String getAvailableGameLanguages();
		String getCurrentBetaName();
		String getCurrentGameLanguage();
		int32 getDLCCount();
		Dictionary getDLCDownloadProgress(uint32_t dlc_id);
		uint32_t getEarliestPurchaseUnixTime(uint32_t app_id);
		void getFileDetails(const String& filename);
		Array getInstalledDepots(uint32_t app_id);
		String getLaunchCommandLine();
		String getLaunchQueryParam(const String& key);
		void installDLC(uint32_t dlc_id);
		bool markContentCorrupt(bool missing_files_only);
		bool setDLCContext(uint32_t app_id);
		void uninstallDLC(uint32_t dlc_id);
		
		// App Lists ////////////////////////////
		uint32 getNumInstalledApps();
		Array getInstalledApps(uint32 max_app_ids);
		String getAppName(uint32_t app_id, int name_max);
		String getAppListInstallDir(uint32_t app_id, int name_max);
		int getAppListBuildId(uint32_t app_id);

		// Friends //////////////////////////////
		void activateGameOverlay(const String& type);
		void activateGameOverlayInviteDialog(uint64_t steam_id);
		void activateGameOverlayInviteDialogConnectString(const String& connect_string);
		void activateGameOverlayToStore(uint32_t app_id = 0);
		void activateGameOverlayToUser(const String& type, uint64_t steam_id);
		void activateGameOverlayToWebPage(const String& url);
		void clearRichPresence();
		bool closeClanChatWindowInSteam(uint64_t chat_id);
		void downloadClanActivityCounts(uint64_t clan_id, int clans_to_request);
		void enumerateFollowingList(uint32 start_index);
		uint64_t getChatMemberByIndex(uint64_t clan_id, int user);
		Dictionary getClanActivityCounts(uint64_t clan_id);
		uint64_t getClanByIndex(int clan);
		int getClanChatMemberCount(uint64_t clan_id);
		Dictionary getClanChatMessage(uint64_t chat_id, int message);
		int getClanCount();
		String getClanName(uint64_t clan_id);
		uint64_t getClanOfficerByIndex(uint64_t clan_id, int officer);
		int getClanOfficerCount(uint64_t clan_id);
		uint64_t getClanOwner(uint64_t clan_id);
		String getClanTag(uint64_t clan_id);
		uint64_t getCoplayFriend(int friend_number);
		int getCoplayFriendCount();
		void getFollowerCount(uint64_t steam_id);
		uint64_t getFriendByIndex(int friend_number, int friend_flags);
		uint32 getFriendCoplayGame(uint64_t friend_id);
		int getFriendCoplayTime(uint64_t friend_id);
		int getFriendCount();
		int getFriendCountFromSource(uint64_t source_id);
		uint64_t getFriendFromSourceByIndex(uint64_t source_id, int friend_number);
		Dictionary getFriendGamePlayed(uint64_t steam_id);
		Dictionary getFriendMessage(uint64_t friend_id, int message);
		String getFriendPersonaName(uint64_t steam_id);
		String getFriendPersonaNameHistory(uint64_t steam_id, int name_history);
		int getFriendPersonaState(uint64_t steam_id);
		int getFriendRelationship(uint64_t steam_id);
		String getFriendRichPresence(uint64_t friend_id, const String& key);
		int getFriendRichPresenceKeyCount(uint64_t friend_id);
		String getFriendRichPresenceKeyByIndex(uint64_t friend_id, int key);		
		int getFriendsGroupCount();
		int16 getFriendsGroupIDByIndex(int16 friend_group);
		int getFriendsGroupMembersCount(int16 friend_group);
		Array getFriendsGroupMembersList(int16 friend_group, int member_count);
		String getFriendsGroupName(int16 friend_group);
		int getFriendSteamLevel(uint64_t steam_id);
		int getLargeFriendAvatar(uint64_t steam_id);
		int getMediumFriendAvatar(uint64_t steam_id);
		String getPersonaName();
		int getPersonaState();
		void getPlayerAvatar(int size = 2, uint64_t steam_id = 0);
		String getPlayerNickname(uint64_t steam_id);
		String getProfileItemPropertyString(uint64_t steam_id, int item_type, int item_property);
		uint32 getProfileItemPropertyInt(uint64_t steam_id, int item_type, int item_property);
		Array getRecentPlayers();
		int getSmallFriendAvatar(uint64_t steam_id);
		Array getUserFriendsGroups();
		uint32 getUserRestrictions();
		Array getUserSteamFriends();
		Array getUserSteamGroups();
		bool hasEquippedProfileItem(uint64_t steam_id, int item_type);
		bool hasFriend(uint64_t steam_id, int friend_flags);
		bool inviteUserToGame(uint64_t friend_id, const String& connect_string);
		bool isClanChatAdmin(uint64_t chat_id, uint64_t steam_id);
		bool isClanPublic(uint64_t clan_id);
		bool isClanOfficialGameGroup(uint64_t clan_id);
		bool isClanChatWindowOpenInSteam(uint64_t chat_id);
		void isFollowing(uint64_t steam_id);
		bool isUserInSource(uint64_t steam_id, uint64_t source_id);
		void joinClanChatRoom(uint64_t clan_id);
		bool leaveClanChatRoom(uint64_t clan_id);
		bool openClanChatWindowInSteam(uint64_t chat_id);
		bool registerProtocolInOverlayBrowser(const String& protocol);
		bool replyToFriendMessage(uint64_t steam_id, const String& message);
		void requestClanOfficerList(uint64_t clan_id);
		void requestFriendRichPresence(uint64_t friend_id);
		bool requestUserInformation(uint64_t steam_id, bool require_name_only);
		bool sendClanChatMessage(uint64_t chat_id, const String& text);
		void setInGameVoiceSpeaking(uint64_t steam_id, bool speaking);
		bool setListenForFriendsMessages(bool intercept);
		void setPersonaName(const String& name);
		void setPlayedWith(uint64_t steam_id);
		bool setRichPresence(const String& key, const String& value);

		// Game Search //////////////////////////
		int addGameSearchParams(const String& key, const String& values);
		int searchForGameWithLobby(uint64_t lobby_id, int player_min, int player_max);
		int searchForGameSolo(int player_min, int player_max);
		int acceptGame();
		int declineGame();
		String retrieveConnectionDetails(uint64_t host_id);
		int endGameSearch();
		int setGameHostParams(const String& key, const String& value);
		int setConnectionDetails(const String& details, int connection_details);
		int requestPlayersForGame(int player_min, int player_max, int max_team_size);
		int hostConfirmGameStart(uint64_t game_id);
		int cancelRequestPlayersForGame();
		int submitPlayerResult(uint64_t game_id, uint64_t player_id, int player_result);
		int endGame(uint64_t game_id);

		// HTML Surface /////////////////////////
		void addHeader(const String& key, const String& value, uint32 this_handle = 0);
		void allowStartRequest(bool allowed, uint32 this_handle = 0);
		void copyToClipboard(uint32 this_handle = 0);
		void createBrowser(const String& user_agent, const String& user_css);
		void executeJavascript(const String& script, uint32 this_handle = 0);
		void find(const String& search, bool currently_in_find, bool reverse, uint32 this_handle = 0);
		void getLinkAtPosition(int x, int y, uint32 this_handle = 0);
		void goBack(uint32 this_handle = 0);
		void goForward(uint32 this_handle = 0);
		void htmlInit();
		void jsDialogResponse(bool result, uint32 this_handle = 0);
		void keyChar(uint32 unicode_char, int key_modifiers, uint32 this_handle = 0);
		void keyDown(uint32 native_key_code, int key_modifiers, uint32 this_handle = 0);
		void keyUp(uint32 native_key_code, int key_modifiers, uint32 this_handle = 0);
		void loadURL(const String& url, const String& post_data, uint32 this_handle = 0);
		void mouseDoubleClick(int mouse_button, uint32 this_handle = 0);
		void mouseDown(int mouse_button, uint32 this_handle = 0);
		void mouseMove(int x, int y, uint32 this_handle = 0);
		void mouseUp(int mouse_button, uint32 this_handle = 0);
		void mouseWheel(int32 delta, uint32 this_handle = 0);
		void pasteFromClipboard(uint32 this_handle = 0);
		void reload(uint32 this_handle = 0);
		void removeBrowser(uint32 this_handle = 0);
		void setBackgroundMode(bool background_mode, uint32 this_handle = 0);
		void setCookie(const String& hostname, const String& key, const String& value, const String& path, uint32 expires, bool secure, bool http_only);
		void setHorizontalScroll(uint32 absolute_pixel_scroll, uint32 this_handle = 0);
		void setKeyFocus(bool has_key_focus, uint32 this_handle = 0);
		void setPageScaleFactor(float zoom, int point_x, int point_y, uint32 this_handle = 0);
		void setSize(uint32 width, uint32 height, uint32 this_handle = 0);
		void setVerticalScroll(uint32 absolute_pixel_scroll, uint32 this_handle = 0);
		bool htmlShutdown();
		void stopFind(uint32 this_handle = 0);
		void stopLoad(uint32 this_handle = 0);
		void viewSource(uint32 this_handle = 0);

		// HTTP /////////////////////////////////
		uint32_t createCookieContainer( bool allow_responses_to_modify);
		uint32_t createHTTPRequest(int request_method, const String& absolute_url);
		bool deferHTTPRequest(uint32 request_handle);
		float getHTTPDownloadProgressPct(uint32 request_handle);
		bool getHTTPRequestWasTimedOut(uint32 request_handle);
		PoolByteArray getHTTPResponseBodyData(uint32 request_handle, uint32 buffer_size);
		uint32 getHTTPResponseBodySize(uint32 request_handle);
		uint32 getHTTPResponseHeaderSize(uint32 request_handle, const String& header_name);
		uint8 getHTTPResponseHeaderValue(uint32 request_handle, const String& header_name, uint32 buffer_size);
		uint8 getHTTPStreamingResponseBodyData(uint32 request_handle, uint32 offset, uint32 buffer_size);
		bool prioritizeHTTPRequest(uint32 request_handle);
		bool releaseCookieContainer(uint32 cookie_handle);
		bool releaseHTTPRequest(uint32 request_handle);
		bool sendHTTPRequest(uint32 request_handle);
		bool sendHTTPRequestAndStreamResponse(uint32 request_handle);
		bool setHTTPCookie(uint32 cookie_handle, const String& host, const String& url, const String& cookie);
		bool setHTTPRequestAbsoluteTimeoutMS(uint32 request_handle, uint32 milliseconds);
		bool setHTTPRequestContextValue(uint32 request_handle, uint64_t context_value);
		bool setHTTPRequestCookieContainer(uint32 request_handle, uint32 cookie_handle);
		bool setHTTPRequestGetOrPostParameter(uint32 request_handle, const String& name, const String& value);
		bool setHTTPRequestHeaderValue(uint32 request_handle, const String& header_name, const String& header_value);
		bool setHTTPRequestNetworkActivityTimeout(uint32 request_handle, uint32 timeout_seconds);
		uint8 setHTTPRequestRawPostBody(uint32 request_handle, const String& content_type, uint32 body_length);
		bool setHTTPRequestRequiresVerifiedCertificate(uint32 request_handle, bool require_verified_certificate);
		bool setHTTPRequestUserAgentInfo(uint32 request_handle, const String& user_agent_info);
		
		// Input ////////////////////////////////
		void activateActionSet(uint64_t input_handle, uint64_t action_set_handle);
		void activateActionSetLayer(uint64_t input_handle, uint64_t action_set_layer_handle);
		void deactivateActionSetLayer(uint64_t input_handle, uint64_t action_set_handle);
		void deactivateAllActionSetLayers(uint64_t input_handle);
		void enableDeviceCallbacks();
//		void enableActionEventCallbacks();
		uint64_t getActionSetHandle(const String& action_set_name);
		int getActionOriginFromXboxOrigin(uint64_t input_handle, int origin);
		Array getActiveActionSetLayers(uint64_t input_handle);
		Dictionary getAnalogActionData(uint64_t input_handle, uint64_t analog_action_handle);
		uint64_t getAnalogActionHandle(const String& action_name);
		Array getAnalogActionOrigins(uint64_t input_handle, uint64_t action_set_handle, uint64_t analog_action_handle);
		Array getConnectedControllers();
		uint64_t getControllerForGamepadIndex(int index);
		uint64_t getCurrentActionSet(uint64_t input_handle);
		Array getDeviceBindingRevision(uint64_t input_handle);
		Dictionary getDigitalActionData(uint64_t input_handle, uint64_t digital_action_handle);
		uint64_t getDigitalActionHandle(const String& action_name);
		Array getDigitalActionOrigins(uint64_t input_handle, uint64_t action_set_handle, uint64_t digital_action_handle);
		int getGamepadIndexForController(uint64_t input_handle);
		String getGlyphForActionOrigin(int origin);
		String getGlyphForXboxOrigin(int origin);
		String getGlyphPNGForActionOrigin(int origin, int size, uint32 flags);
		String getGlyphSVGForActionOrigin(int origin, uint32 flags);
		String getInputTypeForHandle(uint64_t input_handle);
		Dictionary getMotionData(uint64_t input_handle);
		int getRemotePlaySessionID(uint64_t input_handle);
		uint16 getSessionInputConfigurationSettings();
		String getStringForActionOrigin(int origin);
		String getStringForAnalogActionName(uint64_t action_handle);
		String getStringForDigitalActionName(uint64_t action_handle);
		String getStringForXboxOrigin(int origin);
		bool inputInit(bool explicitly_call_runframe = false);
		bool inputShutdown();
		void inputActionEventCallback(SteamInputActionEvent_t* call_data);
		bool newDataAvailable();
		void runFrame(bool reserved_value = true);
		void setLEDColor(uint64_t input_handle, int color_r, int color_g, int color_b, int flags);
		bool showBindingPanel(uint64_t input_handle);
		void stopAnalogActionMomentum(uint64_t input_handle, uint64_t action);
		int translateActionOrigin(int destination_input, int source_origin);
		void triggerHapticPulse(uint64_t input_handle, int target_pad, int duration);
		void triggerRepeatedHapticPulse(uint64_t input_handle, int target_pad, int duration, int offset, int repeat, int flags);
		void triggerSimpleHapticEvent(uint64_t input_handle, int haptic_location, uint8 intensity, const String& gain_db, uint8 other_intensity, const String& other_gain_db);
		void triggerVibration(uint64_t input_handle, uint32_t left_speed, uint32_t right_speed);
		void triggerVibrationExtended(uint64_t input_handle, uint32_t left_speed, uint32_t right_speed, uint32_t left_trigger_speed, uint32_t right_trigger_speed);
		bool setInputActionManifestFilePath(const String& manifest_path);
		void setDualSenseTriggerEffect(uint64_t input_handle, int parameter_index, int trigger_mask, int effect_mode, int position, int amplitude, int frequency);
		bool waitForData(bool wait_forever, uint32 timeout);

		// Inventory ////////////////////////////
		int32 addPromoItem(uint32 item);
		int32 addPromoItems(PoolIntArray items);
		bool checkResultSteamID(uint64_t steam_id_expected, int32 this_inventory_handle = 0);
		int32 consumeItem(uint64_t item_consume, uint32 quantity);
		int32 deserializeResult(PoolByteArray buffer);
		void destroyResult(int32 this_inventory_handle = 0);
		int32 exchangeItems(const PoolIntArray output_items, const uint32 output_quantity, const uint64_t input_items, const uint32 input_quantity);
		int32 generateItems(const PoolIntArray items, const uint32 quantity);
		int32 getAllItems();
		String getItemDefinitionProperty(uint32 definition, const String& name);
		int32 getItemsByID(const uint64_t id_array, uint32 count);
		uint64_t getItemPrice(uint32 definition);
		Array getItemsWithPrices(uint32 length);
		uint32 getNumItemsWithPrices();
		String getResultItemProperty(uint32 index, const String& name, int32 this_inventory_handle = 0);
		Array getResultItems(int32 this_inventory_handle = 0);
		String getResultStatus(int32 this_inventory_handle = 0);
		uint32 getResultTimestamp(int32 this_inventory_handle = 0);
		int32 grantPromoItems();
		bool loadItemDefinitions();
		void requestEligiblePromoItemDefinitionsIDs(uint64_t steam_id);
		void requestPrices();
		String serializeResult(int32 this_inventory_handle = 0);
		void startPurchase(const PoolIntArray items, const uint32 quantity);
		int32 transferItemQuantity(uint64_t item_id, uint32 quantity, uint64_t item_destination, bool split);
		int32 triggerItemDrop(uint32 definition);
		void startUpdateProperties();
		int32 submitUpdateProperties(uint64_t this_inventory_update_handle = 0);
		bool removeProperty(uint64_t item_id, const String& name, uint64_t this_inventory_update_handle = 0);
		bool setPropertyString(uint64_t item_id, const String& name, const String& value, uint64_t this_inventory_update_handle = 0);
		bool setPropertyBool(uint64_t item_id, const String& name, bool value, uint64_t this_inventory_update_handle = 0);
		bool setPropertyInt(uint64_t item_id, const String& name, uint64_t value, uint64_t this_inventory_update_handle = 0);
		bool setPropertyFloat(uint64_t item_id, const String& name, float value, uint64_t this_inventory_update_handle = 0);

		// Matchmaking //////////////////////////
		Array getFavoriteGames();
		int addFavoriteGame(uint32 ip, uint16 port, uint16 query_port, uint32 flags, uint32 last_played);
		bool removeFavoriteGame(uint32 app_id, uint32 ip, uint16 port, uint16 query_port, uint32 flags);
		void requestLobbyList();
		void addRequestLobbyListStringFilter(const String& key_to_match, const String& value_to_match, int comparison_type);
		void addRequestLobbyListNumericalFilter(const String& key_to_match, int value_to_match, int comparison_type);
		void addRequestLobbyListNearValueFilter(const String& key_to_match, int value_to_be_close_to);
		void addRequestLobbyListFilterSlotsAvailable(int slots_available);
		void addRequestLobbyListDistanceFilter(int distance_filter);
		void addRequestLobbyListResultCountFilter(int max_results);
		void createLobby(int lobby_type, int max_members);
		void joinLobby(uint64_t steam_lobby_id);
		void leaveLobby(uint64_t steam_lobby_id);
		bool inviteUserToLobby(uint64_t steam_lobby_id, uint64_t steam_id_invitee);
		int getNumLobbyMembers(uint64_t steam_lobby_id);
		uint64_t getLobbyMemberByIndex(uint64_t steam_lobby_id, int member);
		String getLobbyData(uint64_t steam_lobby_id, const String& key);
		bool setLobbyData(uint64_t steam_lobby_id, const String& key, const String& value);
		Dictionary getAllLobbyData(uint64_t steam_lobby_id);
		bool deleteLobbyData(uint64_t steam_lobby_id, const String& key);
		String getLobbyMemberData(uint64_t steam_lobby_id, uint64_t steam_id_user, const String& key);
		void setLobbyMemberData(uint64_t steam_lobby_id, const String& key, const String& value);
		bool sendLobbyChatMsg(uint64_t steam_lobby_id, const String& message_body);
		bool requestLobbyData(uint64_t steam_lobby_id);
		void setLobbyGameServer(uint64_t steam_lobby_id, const String& server_ip, uint16 server_port, uint64_t steam_id_game_server);
		Dictionary getLobbyGameServer(uint64_t steam_lobby_id);
		bool setLobbyMemberLimit(uint64_t steam_lobby_id, int max_members);
		int getLobbyMemberLimit(uint64_t steam_lobby_id);
		bool setLobbyType(uint64_t steam_lobby_id, int lobby_type);
		bool setLobbyJoinable(uint64_t steam_lobby_id, bool joinable);
		uint64_t getLobbyOwner(uint64_t steam_lobby_id);
		bool setLobbyOwner(uint64_t steam_lobby_id, uint64_t steam_id_new_owner);

		// Matchmaking Servers //////////////////
		void cancelQuery(uint64_t server_list_request);
		void cancelServerQuery(int server_query);
		int getServerCount(uint64_t server_list_request);
		Dictionary getServerDetails(uint64_t server_list_request, int server);
		bool isRefreshing(uint64_t server_list_request);
		int pingServer(const String& ip, uint16 port);
		int playerDetails(const String& ip, uint16 port);
		void refreshQuery(uint64_t server_list_request);
		void refreshServer(uint64_t server_list_request, int server);
		void releaseRequest(uint64_t server_list_request);
		void requestFavoritesServerList(uint32 app_id, Array filters);
		void requestFriendsServerList(uint32 app_id, Array filters);
		void requestHistoryServerList(uint32 app_id, Array filters);
		void requestInternetServerList(uint32 app_id, Array filters);
		void requestLANServerList(uint32 app_id);
		void requestSpectatorServerList(uint32 app_id, Array filters);
		int serverRules(const String& ip, uint16 port);

		// Music ////////////////////////////////
		bool musicIsEnabled();
		bool musicIsPlaying();
		int getPlaybackStatus();
		float musicGetVolume();
		void musicPause();
		void musicPlay();
		void musicPlayNext();
		void musicPlayPrev();
		void musicSetVolume(float volume);

		// Music Remote /////////////////////////
		bool activationSuccess(bool activate);
		bool isCurrentMusicRemote();
		bool currentEntryDidChange();
		bool currentEntryIsAvailable(bool available);
		bool currentEntryWillChange();
		bool deregisterSteamMusicRemote();
		bool enableLooped(bool loop);
		bool enablePlaylists(bool playlists);
		bool enablePlayNext(bool next);
		bool enablePlayPrevious(bool previous);
		bool enableQueue(bool queue);
		bool enableShuffled(bool shuffle);
		bool playlistDidChange();
		bool playlistWillChange();
		bool queueDidChange();
		bool queueWillChange();
		bool registerSteamMusicRemote(const String& name);
		bool resetPlaylistEntries();
		bool resetQueueEntries();
		bool setCurrentPlaylistEntry(int id);
		bool setCurrentQueueEntry(int id);
		bool setDisplayName(const String& name);
		bool setPlaylistEntry(int id, int position, const String& entry_text);
		bool setPNGIcon64x64(PoolByteArray icon);
		bool setQueueEntry(int id, int position, const String& entry_text);
		bool updateCurrentEntryCoverArt(PoolByteArray art);
		bool updateCurrentEntryElapsedSeconds(int seconds);
		bool updateCurrentEntryText(const String& text);
		bool updateLooped(bool looped);
		bool updatePlaybackStatus(int status);
		bool updateShuffled(bool shuffle);
		bool updateVolume(float volume);

		// Networking ///////////////////////////
		bool acceptP2PSessionWithUser(uint64_t steam_id_remote);
		bool allowP2PPacketRelay(bool allow);
		bool closeP2PChannelWithUser(uint64_t steam_id_remote, int channel);
		bool closeP2PSessionWithUser(uint64_t steam_id_remote);
		Dictionary getP2PSessionState(uint64_t steam_id_remote);
		uint32_t getAvailableP2PPacketSize(int channel = 0);
		Dictionary readP2PPacket(uint32_t packet, int channel = 0);
		bool sendP2PPacket(uint64_t steam_id_remote, const PoolByteArray data, int send_type, int channel = 0);

		// Networking Messages //////////////////
		bool acceptSessionWithUser(const String& identity_reference);
		bool closeChannelWithUser(const String& identity_reference, int channel);
		bool closeSessionWithUser(const String& identity_reference);
		Dictionary getSessionConnectionInfo(const String& identity_reference, bool get_connection, bool get_status);
		Array receiveMessagesOnChannel(int channel, int max_messages);
		int sendMessageToUser(const String& identity_reference, const PoolByteArray data, int flags, int channel);
		
		// Networking Sockets ///////////////////
		int acceptConnection(uint32 connection);
		bool beginAsyncRequestFakeIP(int num_ports);
		bool closeConnection(uint32 peer, int reason, const String& debug_message, bool linger);
		bool closeListenSocket(uint32 socket);
		int configureConnectionLanes(uint32 connection, int lanes, Array priorities, Array weights);
		uint32 connectP2P(const String& identity_reference, int virtual_port, Array options);
		uint32 connectToHostedDedicatedServer(const String& identity_reference, int virtual_port, Array options);
		void createFakeUDPPort(int fake_server_port);
		uint32 createHostedDedicatedServerListenSocket(int virtual_port, Array options);
		uint32 createListenSocketIP(const String& ip_reference, Array options);
		uint32 createListenSocketP2P(int virtual_port, Array options);
		uint32 createListenSocketP2PFakeIP(int fake_port, Array options);
		uint32 createPollGroup();
		Dictionary createSocketPair(bool loopback, const String& identity_reference1, const String& identity_reference2);
		bool destroyPollGroup(uint32 poll_group);
//		int findRelayAuthTicketForServer(int port);	<------ Uses datagram relay structs which were removed from base SDK
		int flushMessagesOnConnection(uint32 connection_handle);
		int getAuthenticationStatus();
		Dictionary getCertificateRequest();
		Dictionary getConnectionInfo(uint32 connection_handle);
		String getConnectionName(uint32 peer);
		Dictionary getConnectionRealTimeStatus(uint32 connection_handle, int lanes, bool get_status = true);
		uint64_t getConnectionUserData(uint32 peer);
		Dictionary getDetailedConnectionStatus(uint32 connection_handle);
		Dictionary getFakeIP(int first_port = 0);
//		int getGameCoordinatorServerLogin(const String& app_data);	<------ Uses datagram relay structs which were removed from base SDK
//		int getHostedDedicatedServerAddress();	<------ Uses datagram relay structs which were removed from base SDK
		uint32 getHostedDedicatedServerPOPId();
		uint16 getHostedDedicatedServerPort();
		bool getListenSocketAddress(uint32 socket);
		String getIdentity();
		Dictionary getRemoteFakeIPForConnection(uint32 connection);
		int initAuthentication();
		Array receiveMessagesOnConnection(uint32 connection, int max_messages);
		Array receiveMessagesOnPollGroup(uint32 poll_group, int max_messages);
//		Dictionary receivedRelayAuthTicket();	<------ Uses datagram relay structs which were removed from base SDK
		void resetIdentity(const String& this_identity);
		void runNetworkingCallbacks();
		void sendMessages(int messages, const PoolByteArray data, uint32 connection_handle, int flags);
		Dictionary sendMessageToConnection(uint32 connection_handle, const PoolByteArray data, int flags);
		Dictionary setCertificate(const PoolByteArray& certificate);		
		bool setConnectionPollGroup(uint32 connection_handle, uint32 poll_group);
		void setConnectionName(uint32 peer, const String& name);

		// Networking Types /////////////////////
		bool addIdentity(const String& reference_name);
		bool addIPAddress(const String& reference_name);
		void clearIdentity(const String& reference_name);
		void clearIPAddress(const String& reference_name);
		uint8 getGenericBytes(const String& reference_name);
		String getGenericString(const String& reference_name);
		Array getIdentities();
		uint32 getIdentityIPAddr(const String& reference_name);
		uint32 getIdentitySteamID(const String& reference_name);
		uint64_t getIdentitySteamID64(const String& reference_name);
		Array getIPAddresses();
		uint32 getIPv4(const String& reference_name);
		uint64_t getPSNID(const String& reference_name);
		uint64_t getStadiaID(const String& reference_name);
		String getXboxPairwiseID(const String& reference_name);
		bool isAddressLocalHost(const String& reference_name);
		bool isIdentityInvalid(const String& reference_name);
		bool isIdentityLocalHost(const String& reference_name);
		bool isIPv4(const String& reference_name);
		bool isIPv6AllZeros(const String& reference_name);
		bool parseIdentityString(const String& reference_name, const String& string_to_parse);
		bool parseIPAddressString(const String& reference_name, const String& string_to_parse);
		bool setGenericBytes(const String& reference_name, uint8 data);
		bool setGenericString(const String& reference_name, const String& this_string);
		bool setIdentityIPAddr(const String& reference_name, const String& ip_address_name);
		void setIdentityLocalHost(const String& reference_name);
		void setIdentitySteamID(const String& reference_name, uint32 steam_id);
		void setIdentitySteamID64(const String& reference_name, uint64_t steam_id);
		void setIPv4(const String& reference_name, uint32 ip, uint16 port);
		void setIPv6(const String& reference_name, uint8 ipv6, uint16 port);
		void setIPv6LocalHost(const String& reference_name, uint16 port = 0);
		void setPSNID(const String& reference_name, uint64_t psn_id);
		void setStadiaID(const String& reference_name, uint64_t stadia_id);
		bool setXboxPairwiseID(const String& reference_name, const String& xbox_id);
		String toIdentityString(const String& reference_name);
		String toIPAddressString(const String& reference_name, bool with_port);
		const SteamNetworkingConfigValue_t* convertOptionsArray(Array options);
		
		// Networking Utils /////////////////////
		bool checkPingDataUpToDate(float max_age_in_seconds);
		String convertPingLocationToString(PoolByteArray location);
		int estimatePingTimeBetweenTwoLocations(PoolByteArray location1, PoolByteArray location2);
		int estimatePingTimeFromLocalHost(PoolByteArray location);
		Dictionary getConfigValue(int config_value, int scope_type, uint32_t connection_handle);
		Dictionary getConfigValueInfo(int config_value);
		int getDirectPingToPOP(uint32 pop_id);
		Dictionary getLocalPingLocation();
		uint64_t getLocalTimestamp();
		Dictionary getPingToDataCenter(uint32 pop_id);
		int getPOPCount();
		Array getPOPList();
		int getRelayNetworkStatus();
		void initRelayNetworkAccess();
		Dictionary parsePingLocationString(const String& location_string);
		bool setConnectionConfigValueFloat(uint32 connection, int config, float value);
		bool setConnectionConfigValueInt32(uint32 connection, int config, int32 value);
		bool setConnectionConfigValueString(uint32 connection, int config, const String& value);
//		bool setConfigValue(int setting, int scope_type, uint32_t connection_handle, int data_type, auto value);
		bool setGlobalConfigValueFloat(int config, float value);		
		bool setGlobalConfigValueInt32(int config, int32 value);
		bool setGlobalConfigValueString(int config, const String& value);

		// Parental Settings ////////////////////
		bool isParentalLockEnabled();
		bool isParentalLockLocked();
		bool isAppBlocked(uint32 app_id);
		bool isAppInBlockList(uint32 app_id);
		bool isFeatureBlocked(int feature);
		bool isFeatureInBlockList(int feature);

		// Parties //////////////////////////////
		void cancelReservation(uint64_t beacon_id, uint64_t steam_id);
		void changeNumOpenSlots(uint64_t beacon_id, uint32 open_slots);
		void createBeacon(uint32 open_slots, uint64_t location_id, int type, const String& connect_string, const String& metadata);
		bool destroyBeacon(uint64_t beacon_id);
		Array getAvailableBeaconLocations(uint32 max);
		uint64_t getBeaconByIndex(uint32 index);
		Dictionary getBeaconDetails(uint64_t beacon_id);
		String getBeaconLocationData(uint64_t location_id, int location_type, int location_data);
		uint32 getNumActiveBeacons();
		void joinParty(uint64_t beacon_id);
		void onReservationCompleted(uint64_t beacon_id, uint64_t steam_id);
		
		// Remote Play //////////////////////////
		uint32 getSessionCount();
		uint32 getSessionID(uint32 index);
		uint64_t getSessionSteamID(uint32 session_id);
		String getSessionClientName(uint32 session_id);
		int getSessionClientFormFactor(uint32 session_id);
		Dictionary getSessionClientResolution(uint32 session_id);
		bool sendRemotePlayTogetherInvite(uint64_t friend_id);

		// Remote Storage ///////////////////////
		bool beginFileWriteBatch();
		bool endFileWriteBatch();
		bool fileDelete(const String& file);
		bool fileExists(const String& file);
		bool fileForget(const String& file);
		bool filePersisted(const String& file);
		Dictionary fileRead(const String& file, int32_t data_to_read);
		void fileReadAsync(const String& file, uint32 offset, uint32_t data_to_read);
		void fileShare(const String& file);
		bool fileWrite(const String& file, PoolByteArray data, int32 size = 0);
		void fileWriteAsync(const String& file, PoolByteArray data, int32 size = 0);
		bool fileWriteStreamCancel(uint64_t write_handle);
		bool fileWriteStreamClose(uint64_t write_handle);
		uint64_t fileWriteStreamOpen(const String& file);
		bool fileWriteStreamWriteChunk(uint64_t write_handle, PoolByteArray data);
		int32 getCachedUGCCount();
		uint64_t getCachedUGCHandle(int32 content);
		int32_t getFileCount();
		Dictionary getFileNameAndSize(int file);
		int32_t getFileSize(const String& file);
		int64_t getFileTimestamp(const String& file);
		Dictionary getLocalFileChange(int file);
		uint32_t getLocalFileChangeCount();
		Dictionary getQuota();
		Dictionary getSyncPlatforms(const String& file);
		Dictionary getUGCDetails(uint64_t content);
		Dictionary getUGCDownloadProgress(uint64_t content);
		bool isCloudEnabledForAccount();
		bool isCloudEnabledForApp();
		void setCloudEnabledForApp(bool enabled);
		bool setSyncPlatforms(const String& file, int platform);
		void ugcDownload(uint64_t content, uint32 priority);
		void ugcDownloadToLocation(uint64_t content, const String& location, uint32 priority);
		PoolByteArray ugcRead(uint64_t content, int32 data_size, uint32 offset, int action);
		
		// Screenshots //////////////////////////
		uint32_t addScreenshotToLibrary(const String& filename, const String& thumbnail_filename, int width, int height);
		uint32_t addVRScreenshotToLibrary(int type, const String& filename, const String& vr_filename);
		void hookScreenshots(bool hook);
		bool isScreenshotsHooked();
		bool setLocation(uint32_t screenshot, const String& location);
		bool tagPublishedFile(uint32_t screenshot, uint64_t file_id);
		bool tagUser(uint32_t screenshot, uint64_t steam_id);
		void triggerScreenshot();
		uint32_t writeScreenshot(const PoolByteArray& rgb, int width, int height);

		// UGC //////////////////////////////////
		void addAppDependency(uint64_t published_file_id, uint32_t app_id);
		void addDependency(uint64_t published_file_id, uint64_t child_published_file_id);
		bool addExcludedTag(uint64_t query_handle, const String& tag_name);
		bool addItemKeyValueTag(uint64_t query_handle, const String& key, const String& value);
		bool addItemPreviewFile(uint64_t query_handle, const String& preview_file, int type);
		bool addItemPreviewVideo(uint64_t query_handle, const String& video_id);
		void addItemToFavorites(uint32_t app_id, uint64_t published_file_id);
		bool addRequiredKeyValueTag(uint64_t query_handle, const String& key, const String& value);
		bool addRequiredTag(uint64_t query_handle, const String& tag_name);
		bool addRequiredTagGroup(uint64_t query_handle, Array tag_array);
		bool initWorkshopForGameServer(uint32_t workshop_depot_id);
		void createItem(uint32 app_id, int file_type);
		uint64_t createQueryAllUGCRequest(int query_type, int matching_type, uint32_t creator_id, uint32_t consumer_id, uint32 page);
		uint64_t createQueryUGCDetailsRequest(Array published_file_id);
		uint64_t createQueryUserUGCRequest(uint64_t steam_id, int list_type, int matching_ugc_type, int sort_order, uint32_t creator_id, uint32_t consumer_id, uint32 page);
		void deleteItem(uint64_t published_file_id);
		bool downloadItem(uint64_t published_file_id, bool high_priority);
		Dictionary getItemDownloadInfo(uint64_t published_file_id);
		Dictionary getItemInstallInfo(uint64_t published_file_id);
		uint32 getItemState(uint64_t published_file_id);
		Dictionary getItemUpdateProgress(uint64_t update_handle);
		uint32 getNumSubscribedItems();
		Dictionary getQueryUGCAdditionalPreview(uint64_t query_handle, uint32 index, uint32 preview_index);
		Dictionary getQueryUGCChildren(uint64_t query_handle, uint32 index, uint32_t child_count);
		Dictionary getQueryUGCKeyValueTag(uint64_t query_handle, uint32 index, uint32 key_value_tag_index);
		String getQueryUGCMetadata(uint64_t query_handle, uint32 index);
		uint32 getQueryUGCNumAdditionalPreviews(uint64_t query_handle, uint32 index);
		uint32 getQueryUGCNumKeyValueTags(uint64_t query_handle, uint32 index);
		uint32 getQueryUGCNumTags(uint64_t query_handle, uint32 index);
		String getQueryUGCPreviewURL(uint64_t query_handle, uint32 index);
		Dictionary getQueryUGCResult(uint64_t query_handle, uint32 index);
		Dictionary getQueryUGCStatistic(uint64_t query_handle, uint32 index, int stat_type);
		String getQueryUGCTag(uint64_t query_handle, uint32 index, uint32 tag_index);
		String getQueryUGCTagDisplayName(uint64_t query_handle, uint32 index, uint32 tag_index);
		Array getSubscribedItems();
		void getUserItemVote(uint64_t published_file_id);
		bool releaseQueryUGCRequest(uint64_t query_handle);
		void removeAppDependency(uint64_t published_file_id, uint32_t app_id);
		void removeDependency(uint64_t published_file_id, uint64_t child_published_file_id);
		void removeItemFromFavorites(uint32_t app_id, uint64_t published_file_id);
		bool removeItemKeyValueTags(uint64_t update_handle, const String& key);
		bool removeItemPreview(uint64_t update_handle, uint32 index);
		void sendQueryUGCRequest(uint64_t update_handle);
		bool setAllowCachedResponse(uint64_t update_handle, uint32 max_age_seconds);
		bool setCloudFileNameFilter(uint64_t update_handle, const String& match_cloud_filename);
		bool setItemContent(uint64_t update_handle, const String& content_folder);
		bool setItemDescription(uint64_t update_handle, const String& description);
		bool setItemMetadata(uint64_t update_handle, const String& metadata);
		bool setItemPreview(uint64_t update_handle, const String& preview_file);
		bool setItemTags(uint64_t update_handle, Array tag_array);
		bool setItemTitle(uint64_t update_handle, const String& title);
		bool setItemUpdateLanguage(uint64_t update_handle, const String& language);
		bool setItemVisibility(uint64_t update_handle, int visibility);
		bool setLanguage(uint64_t query_handle, const String& language);
		bool setMatchAnyTag(uint64_t query_handle, bool match_any_tag);
		bool setRankedByTrendDays(uint64_t query_handle, uint32 days);
		bool setReturnAdditionalPreviews(uint64_t query_handle, bool return_additional_previews);
		bool setReturnChildren(uint64_t query_handle, bool return_children);
		bool setReturnKeyValueTags(uint64_t query_handle, bool return_key_value_tags);
		bool setReturnLongDescription(uint64_t query_handle, bool return_long_description);
		bool setReturnMetadata(uint64_t query_handle, bool return_metadata);
		bool setReturnOnlyIDs(uint64_t query_handle, bool return_only_ids);
		bool setReturnPlaytimeStats(uint64_t query_handle, uint32 days);
		bool setReturnTotalOnly(uint64_t query_handle, bool return_total_only);
		bool setSearchText(uint64_t query_handle, const String& search_text);
		void setUserItemVote(uint64_t published_file_id, bool vote_up);
		uint64_t startItemUpdate(uint32_t app_id, uint64_t file_id);
		void startPlaytimeTracking(Array published_file_ids);
		void stopPlaytimeTracking(Array published_file_ids);
		void stopPlaytimeTrackingForAllItems();
		void getAppDependencies(uint64_t published_file_id);
		void submitItemUpdate(uint64_t update_handle, const String& change_note);
		void subscribeItem(uint64_t published_file_id);
		void suspendDownloads(bool suspend);
		void unsubscribeItem(uint64_t published_file_id);
		bool updateItemPreviewFile(uint64_t update_handle, uint32 index, const String& preview_file);
		bool updateItemPreviewVideo(uint64_t update_handle, uint32 index, const String& video_id);
		bool showWorkshopEULA();
		void getWorkshopEULAStatus();
		bool setTimeCreatedDateRange(uint64_t update_handle, uint32 start, uint32 end);
		bool setTimeUpdatedDateRange(uint64_t update_handle, uint32 start, uint32 end);

		// Users ////////////////////////////////
		void advertiseGame(const String& server_ip, int port);
		int beginAuthSession(PoolByteArray ticket, int ticket_size, uint64_t steam_id);
		void cancelAuthTicket(uint32_t auth_ticket);
		Dictionary decompressVoice(const PoolByteArray& voice, uint32 voice_size, uint32 sample_rate);
		void endAuthSession(uint64_t steam_id);
		Dictionary getAuthSessionTicket();
		Dictionary getAvailableVoice();
		void getDurationControl();
		Dictionary getEncryptedAppTicket();
		int getGameBadgeLevel(int series, bool foil);
		int getPlayerSteamLevel();
		uint64_t getSteamID();
		Dictionary getVoice();
		uint32 getVoiceOptimalSampleRate();
		Dictionary initiateGameConnection(uint64_t server_id, uint32 server_ip, uint16 server_port, bool secure);
		bool isBehindNAT();
		bool isPhoneIdentifying();
		bool isPhoneRequiringVerification();
		bool isPhoneVerified();
		bool isTwoFactorEnabled();
		bool loggedOn();
		void requestEncryptedAppTicket(const String& secret);
		void requestStoreAuthURL(const String& redirect);
		void startVoiceRecording();
		bool setDurationControlOnlineState(int new_state);
		void stopVoiceRecording();
		void terminateGameConnection(uint32 server_ip, uint16 server_port);
		int userHasLicenseForApp(uint64_t steam_id, uint32_t app_id);

		// User Stats ///////////////////////////
		void attachLeaderboardUGC(uint64_t ugc_handle, uint64_t this_leaderboard = 0);
		bool clearAchievement(const String& achievement_name);
		void downloadLeaderboardEntries(int start, int end, int type = k_ELeaderboardDataRequestGlobal, uint64_t this_leaderboard = 0);
		void downloadLeaderboardEntriesForUsers(Array users_id, uint64_t this_leaderboard = 0);
		void findLeaderboard(const String& leaderboard_name);
		void findOrCreateLeaderboard(const String& leaderboard_name, int sort_method, int display_type);
		Dictionary getAchievement(const String& achievement_name);
		Dictionary getAchievementAchievedPercent(const String& achievement_name);
		Dictionary getAchievementAndUnlockTime(const String& achievement_name);
		String getAchievementDisplayAttribute(const String& achievement_name, const String& key);
		int getAchievementIcon(const String& achievement_name);
		String getAchievementName(uint32_t achievement);
		Dictionary getAchievementProgressLimitsInt(const String& achievement_name);
		Dictionary getAchievementProgressLimitsFloat(const String& achievement_name);
		uint64_t getGlobalStatInt(const String& stat_name);
		double getGlobalStatFloat(const String& stat_name);
		uint64_t getGlobalStatIntHistory(const String& stat_name);
		double getGlobalStatFloatHistory(const String& stat_name);
		Dictionary getLeaderboardDisplayType(uint64_t this_leaderboard = 0);
		int getLeaderboardEntryCount(uint64_t this_leaderboard = 0);
		String getLeaderboardName(uint64_t this_leaderboard = 0);
		Dictionary getLeaderboardSortMethod(uint64_t this_leaderboard = 0);
		Dictionary getMostAchievedAchievementInfo();
		Dictionary getNextMostAchievedAchievementInfo(int iterator);
		uint32_t getNumAchievements();
		void getNumberOfCurrentPlayers();
		float getStatFloat(const String& stat_name);
		int getStatInt(const String& stat_name);
		Dictionary getUserAchievement(uint64_t steam_id, const String& name);
		Dictionary getUserAchievementAndUnlockTime(uint64_t steam_id, const String& name);
		float getUserStatFloat(uint64_t steam_id, const String& name);
		int getUserStatInt(uint64_t steam_id, const String& name);
		bool indicateAchievementProgress(const String& name, int current_progress, int max_progress);
		bool requestCurrentStats();
		void requestGlobalAchievementPercentages();
		void requestGlobalStats(int history_days);
		void requestUserStats(uint64_t steam_id);
		bool resetAllStats(bool achievements_too = true);
		bool setAchievement(const String& name);
		int setLeaderboardDetailsMax(int max);
		bool setStatFloat(const String& name, float value);
		bool setStatInt(const String& name, int value);
		bool storeStats();
		bool updateAvgRateStat(const String& name, float this_session, double session_length);
		void uploadLeaderboardScore(int score, bool keep_best = false, PoolIntArray details = PoolIntArray(), uint64_t this_leaderboard = 0);
		Array getLeaderboardEntries();

		// Utils ////////////////////////////////
		String filterText(int context, uint64_t steam_id, const String& message);
		String getAPICallFailureReason();
		uint32_t getAppID();
		int getCurrentBatteryPower();
		Dictionary getImageRGBA(int image);
		Dictionary getImageSize(int image);
		uint32 getIPCCallCount();
		String getIPCountry();
		int getSecondsSinceAppActive();
		int getSecondsSinceComputerActive();
		int getServerRealTime();
		String getSteamUILanguage();
		bool initFilterText();
		Dictionary isAPICallCompleted();
		bool isOverlayEnabled();
		bool isSteamChinaLauncher();
		bool isSteamInBigPictureMode();
		bool isSteamRunningInVR();
		bool isVRHeadsetStreamingEnabled();
		bool overlayNeedsPresent();
		void setOverlayNotificationInset(int horizontal, int vertical);
		void setOverlayNotificationPosition(int pos);
		void setVRHeadsetStreamingEnabled(bool enabled);
		bool showGamepadTextInput(int input_mode, int line_input_mode, const String& description, uint32 max_text, const String& preset_text);
		bool showFloatingGamepadTextInput(int input_mode, int text_field_x_position, int text_field_y_position, int text_field_width, int text_field_height);
		void setGameLauncherMode(bool mode);
		void startVRDashboard();
		bool isSteamRunningOnSteamDeck();
		bool dismissFloatingGamepadTextInput();

		// Video ////////////////////////////////
		void getOPFSettings(uint32_t app_id);
		String getOPFStringForApp(uint32_t app_id);
		void getVideoURL(uint32_t app_id);
		Dictionary isBroadcasting();

	protected:
		static void _bind_methods();
		static Steam* singleton;

	private:
		// Main
		bool is_init_success;

		// Apps
		uint64_t current_app_id = 0;
		
		// Friends
		CSteamID clan_activity;

		// HTML Surface
		uint32 browser_handle;

		// HTTP
		uint32 cookie_handle;
		uint32 request_handle;

		// Inventory
		SteamInventoryUpdateHandle_t inventory_update_handle;
		SteamInventoryResult_t inventory_handle;
		SteamItemDetails_t inventory_details;

		// Leaderboards
		SteamLeaderboard_t leaderboard_handle;
		Array leaderboard_entries_array;
		int leaderboard_details_max = 0;

		// Matchmaking Server
		HServerListRequest server_list_request;
		HServerQuery server_query = HSERVERQUERY_INVALID;
		ISteamMatchmakingServerListResponse* server_list_response;
		ISteamMatchmakingPingResponse *ping_response;
		ISteamMatchmakingPlayersResponse *player_response;
		ISteamMatchmakingRulesResponse *rules_response;

		// Networking Messages
//		std::map<int, SteamNetworkingMessage_t> network_messages;

		// Networking Sockets
		uint32 network_connection;
		uint32 listen_socket;
		uint32 network_poll_group;
		uint64_t networking_microseconds = 0;
		SteamNetworkingIdentity networking_identity;
		SteamNetworkingIdentity game_server;
//		SteamDatagramHostedAddress hosted_address;
		PoolByteArray routing_blob;
//		SteamDatagramRelayAuthTicket relay_auth_ticket;
		std::map<String, SteamNetworkingIdentity> networking_identities;
		std::map<String, SteamNetworkingIPAddr> ip_addresses;

		// Parties
		uint64 party_beacon_id;

		// Remote Play
		uint32 session_id;

		// Remote Storage
		uint64_t write_stream_handle = 0;

		// User stats
		int number_achievements = 0;
		bool stats_initialized = false;
		uint64 ugc_handle;

		// Utils
		uint64_t api_handle = 0;

		// Run the Steamworks API callbacks /////
		void run_callbacks(){
			SteamAPI_RunCallbacks();
		}


		/////////////////////////////////////////
		// STEAM CALLBACKS
		/////////////////////////////////////////
		//
		// Apps callbacks ///////////////////////
		STEAM_CALLBACK(Steam, dlc_installed, DlcInstalled_t, callbackDLCInstalled);
		STEAM_CALLBACK(Steam, file_details_result, FileDetailsResult_t, callbackFileDetailsResult);
		STEAM_CALLBACK(Steam, new_launch_url_parameters, NewUrlLaunchParameters_t, callbackNewLaunchURLParameters);
		STEAM_CALLBACK(Steam, timed_trial_status, TimedTrialStatus_t, callbackTimedTrialStatus);

		// Apps List callbacks //////////////////
		STEAM_CALLBACK(Steam, app_installed, SteamAppInstalled_t, callbackAppInstalled);
		STEAM_CALLBACK(Steam, app_uninstalled, SteamAppUninstalled_t, callbackAppUninstalled);

		// Friends callbacks ////////////////////
		STEAM_CALLBACK(Steam, avatar_loaded, AvatarImageLoaded_t, callbackAvatarLoaded);
		STEAM_CALLBACK(Steam, clan_activity_downloaded, DownloadClanActivityCountsResult_t, callbackClanActivityDownloaded);
		STEAM_CALLBACK(Steam, friend_rich_presence_update, FriendRichPresenceUpdate_t, callbackFriendRichPresenceUpdate);
		STEAM_CALLBACK(Steam, connected_chat_join, GameConnectedChatJoin_t, callbackConnectedChatJoin);
		STEAM_CALLBACK(Steam, connected_chat_leave, GameConnectedChatLeave_t, callbackConnectedChatLeave);
		STEAM_CALLBACK(Steam, connected_clan_chat_message, GameConnectedClanChatMsg_t, callbackConnectedClanChatMessage);
		STEAM_CALLBACK(Steam, connected_friend_chat_message, GameConnectedFriendChatMsg_t, callbackConnectedFriendChatMessage);
		STEAM_CALLBACK(Steam, join_requested, GameLobbyJoinRequested_t, callbackJoinRequested);
		STEAM_CALLBACK(Steam, overlay_toggled, GameOverlayActivated_t, callbackOverlayToggled);
		STEAM_CALLBACK(Steam, join_game_requested, GameRichPresenceJoinRequested_t, callbackJoinGameRequested);
		STEAM_CALLBACK(Steam, change_server_requested, GameServerChangeRequested_t, callbackChangeServerRequested);
		STEAM_CALLBACK(Steam, join_clan_chat_complete, JoinClanChatRoomCompletionResult_t, callbackJoinClanChatComplete);
		STEAM_CALLBACK(Steam, persona_state_change, PersonaStateChange_t, callbackPersonaStateChange);
		STEAM_CALLBACK(Steam, name_changed, SetPersonaNameResponse_t, callbackNameChanged);
		STEAM_CALLBACK(Steam, overlay_browser_protocol, OverlayBrowserProtocolNavigation_t, callbackOverlayBrowserProtocol);
		STEAM_CALLBACK(Steam, unread_chat_messages_changed, UnreadChatMessagesChanged_t, callbackUnreadChatMessagesChanged);
		STEAM_CALLBACK(Steam, equipped_profile_items_changed, EquippedProfileItemsChanged_t, callbackEquippedProfileItemsChanged);
		STEAM_CALLBACK(Steam, equipped_profile_items, EquippedProfileItems_t, callbackEquippedProfileItems);

		// Game Search callbacks ////////////////
		STEAM_CALLBACK(Steam, search_for_game_progress, SearchForGameProgressCallback_t, callbackSearchForGameProgress);
		STEAM_CALLBACK(Steam, search_for_game_result, SearchForGameResultCallback_t, callbackSearchForGameResult);
		STEAM_CALLBACK(Steam, request_players_for_game_progress, RequestPlayersForGameProgressCallback_t, callbackRequestPlayersForGameProgress);
		STEAM_CALLBACK(Steam, request_players_for_game_result, RequestPlayersForGameResultCallback_t, callbackRequestPlayersForGameResult);
		STEAM_CALLBACK(Steam, request_players_for_game_final_result, RequestPlayersForGameFinalResultCallback_t, callbackRequestPlayersForGameFinalResult);
		STEAM_CALLBACK(Steam, submit_player_result, SubmitPlayerResultResultCallback_t, callbackSubmitPlayerResult);
		STEAM_CALLBACK(Steam, end_game_result, EndGameResultCallback_t, callbackEndGameResult);

		// HTML Surface callbacks ///////////////
		STEAM_CALLBACK(Steam, html_browser_ready, HTML_BrowserReady_t, callbackHTMLBrowserReady);
		STEAM_CALLBACK(Steam, html_can_go_backandforward, HTML_CanGoBackAndForward_t, callbackHTMLCanGoBackandforward);
		STEAM_CALLBACK(Steam, html_changed_title, HTML_ChangedTitle_t, callbackHTMLChangedTitle);
		STEAM_CALLBACK(Steam, html_close_browser, HTML_CloseBrowser_t, callbackHTMLCloseBrowser);
		STEAM_CALLBACK(Steam, html_file_open_dialog, HTML_FileOpenDialog_t, callbackHTMLFileOpenDialog);
		STEAM_CALLBACK(Steam, html_finished_request, HTML_FinishedRequest_t, callbackHTMLFinishedRequest);
		STEAM_CALLBACK(Steam, html_hide_tooltip, HTML_HideToolTip_t, callbackHTMLHideTooltip);
		STEAM_CALLBACK(Steam, html_horizontal_scroll, HTML_HorizontalScroll_t, callbackHTMLHorizontalScroll);
		STEAM_CALLBACK(Steam, html_js_alert, HTML_JSAlert_t, callbackHTMLJSAlert);
		STEAM_CALLBACK(Steam, html_js_confirm, HTML_JSConfirm_t, callbackHTMLJSConfirm);
		STEAM_CALLBACK(Steam, html_link_at_position, HTML_LinkAtPosition_t, callbackHTMLLinkAtPosition);
		STEAM_CALLBACK(Steam, html_needs_paint, HTML_NeedsPaint_t, callbackHTMLNeedsPaint);
		STEAM_CALLBACK(Steam, html_new_window, HTML_NewWindow_t, callbackHTMLNewWindow);
		STEAM_CALLBACK(Steam, html_open_link_in_new_tab, HTML_OpenLinkInNewTab_t, callbackHTMLOpenLinkInNewTab);
		STEAM_CALLBACK(Steam, html_search_results, HTML_SearchResults_t, callbackHTMLSearchResults);
		STEAM_CALLBACK(Steam, html_set_cursor, HTML_SetCursor_t, callbackHTMLSetCursor);
		STEAM_CALLBACK(Steam, html_show_tooltip, HTML_ShowToolTip_t, callbackHTMLShowTooltip);
		STEAM_CALLBACK(Steam, html_start_request, HTML_StartRequest_t, callbackHTMLStartRequest);
		STEAM_CALLBACK(Steam, html_status_text, HTML_StatusText_t, callbackHTMLStatusText);
		STEAM_CALLBACK(Steam, html_update_tooltip, HTML_UpdateToolTip_t, callbackHTMLUpdateTooltip);
		STEAM_CALLBACK(Steam, html_url_changed, HTML_URLChanged_t, callbackHTMLURLChanged);
		STEAM_CALLBACK(Steam, html_vertical_scroll, HTML_VerticalScroll_t, callbackHTMLVerticalScroll);

		// HTTP callbacks ///////////////////////
		STEAM_CALLBACK(Steam, http_request_completed, HTTPRequestCompleted_t, callbackHTTPRequestCompleted);
		STEAM_CALLBACK(Steam, http_request_data_received, HTTPRequestDataReceived_t, callbackHTTPRequestDataReceived);
		STEAM_CALLBACK(Steam, http_request_headers_received, HTTPRequestHeadersReceived_t, callbackHTTPRequestHeadersReceived);

		// Input callbacks //////////////////////
		STEAM_CALLBACK(Steam, input_device_connected, SteamInputDeviceConnected_t, callbackInputDeviceConnected);
		STEAM_CALLBACK(Steam, input_device_disconnected, SteamInputDeviceDisconnected_t, callbackInputDeviceDisconnected);
		STEAM_CALLBACK(Steam, input_configuration_loaded, SteamInputConfigurationLoaded_t, callbackInputConfigurationLoaded);

		// Inventory callbacks //////////////////
		STEAM_CALLBACK(Steam, inventory_definition_update, SteamInventoryDefinitionUpdate_t, callbackInventoryDefinitionUpdate);
		STEAM_CALLBACK(Steam, inventory_full_update, SteamInventoryFullUpdate_t, callbackInventoryFullUpdate);
		STEAM_CALLBACK(Steam, inventory_result_ready, SteamInventoryResultReady_t, callbackInventoryResultReady);

		// Matchmaking callbacks ////////////////
		STEAM_CALLBACK(Steam, favorites_list_accounts_updated, FavoritesListAccountsUpdated_t, callbackFavoritesListAccountsUpdated);
		STEAM_CALLBACK(Steam, favorites_list_changed, FavoritesListChanged_t, callbackFavoritesListChanged);
		STEAM_CALLBACK(Steam, lobby_message, LobbyChatMsg_t, callbackLobbyMessage);
		STEAM_CALLBACK(Steam, lobby_chat_update, LobbyChatUpdate_t, callbackLobbyChatUpdate);
		STEAM_CALLBACK(Steam, lobby_data_update, LobbyDataUpdate_t, callbackLobbyDataUpdate);
		STEAM_CALLBACK(Steam, lobby_joined, LobbyEnter_t, callbackLobbyJoined);
		STEAM_CALLBACK(Steam, lobby_game_created, LobbyGameCreated_t, callbackLobbyGameCreated);
		STEAM_CALLBACK(Steam, lobby_invite, LobbyInvite_t, callbackLobbyInvite);
		STEAM_CALLBACK(Steam, lobby_kicked, LobbyKicked_t, callbackLobbyKicked);

		// Music Remote callbacks ///////////////
		STEAM_CALLBACK(Steam, music_player_remote_to_front, MusicPlayerRemoteToFront_t, callbackMusicPlayerRemoteToFront);
		STEAM_CALLBACK(Steam, music_player_remote_will_activate, MusicPlayerRemoteWillActivate_t, callbackMusicPlayerRemoteWillActivate);
		STEAM_CALLBACK(Steam, music_player_remote_will_deactivate, MusicPlayerRemoteWillDeactivate_t, callbackMusicPlayerRemoteWillDeactivate);
		STEAM_CALLBACK(Steam, music_player_selects_playlist_entry, MusicPlayerSelectsPlaylistEntry_t, callbackMusicPlayerSelectsPlaylistEntry);
		STEAM_CALLBACK(Steam, music_player_selects_queue_entry, MusicPlayerSelectsQueueEntry_t, callbackMusicPlayerSelectsQueueEntry);
		STEAM_CALLBACK(Steam, music_player_wants_looped, MusicPlayerWantsLooped_t, callbackMusicPlayerWantsLooped);
		STEAM_CALLBACK(Steam, music_player_wants_pause, MusicPlayerWantsPause_t, callbackMusicPlayerWantsPause);
		STEAM_CALLBACK(Steam, music_player_wants_playing_repeat_status, MusicPlayerWantsPlayingRepeatStatus_t, callbackMusicPlayerWantsPlayingRepeatStatus);
		STEAM_CALLBACK(Steam, music_player_wants_play_next, MusicPlayerWantsPlayNext_t, callbackMusicPlayerWantsPlayNext);
		STEAM_CALLBACK(Steam, music_player_wants_play_previous, MusicPlayerWantsPlayPrevious_t, callbackMusicPlayerWantsPlayPrevious);
		STEAM_CALLBACK(Steam, music_player_wants_play, MusicPlayerWantsPlay_t, callbackMusicPlayerWantsPlay);
		STEAM_CALLBACK(Steam, music_player_wants_shuffled, MusicPlayerWantsShuffled_t, callbackMusicPlayerWantsShuffled);
		STEAM_CALLBACK(Steam, music_player_wants_volume, MusicPlayerWantsVolume_t, callbackMusicPlayerWantsVolume);
		STEAM_CALLBACK(Steam, music_player_will_quit, MusicPlayerWillQuit_t, callbackMusicPlayerWillQuit);

		// Networking callbacks /////////////////
		STEAM_CALLBACK(Steam, p2p_session_connect_fail, P2PSessionConnectFail_t, callbackP2PSessionConnectFail);
		STEAM_CALLBACK(Steam, p2p_session_request, P2PSessionRequest_t, callbackP2PSessionRequest);

		// Networking Messages callbacks ////////
		STEAM_CALLBACK(Steam, network_messages_session_request, SteamNetworkingMessagesSessionRequest_t, callbackNetworkMessagesSessionRequest);
		STEAM_CALLBACK(Steam, network_messages_session_failed, SteamNetworkingMessagesSessionFailed_t, callbackNetworkMessagesSessionFailed);

		// Networking Sockets callbacks /////////
		STEAM_CALLBACK(Steam, network_connection_status_changed, SteamNetConnectionStatusChangedCallback_t, callbackNetworkConnectionStatusChanged);
		STEAM_CALLBACK(Steam, network_authentication_status, SteamNetAuthenticationStatus_t, callbackNetworkAuthenticationStatus);
		STEAM_CALLBACK(Steam, fake_ip_result, SteamNetworkingFakeIPResult_t, callbackNetworkingFakeIPResult);

		// Networking Utils callbacks ///////////
		STEAM_CALLBACK(Steam, relay_network_status, SteamRelayNetworkStatus_t, callbackRelayNetworkStatus);

		// Parental Settings callbacks //////////
		STEAM_CALLBACK(Steam, parental_setting_changed, SteamParentalSettingsChanged_t, callbackParentlSettingChanged);

		// Parties callbacks ////////////////////
		STEAM_CALLBACK(Steam, reservation_notification, ReservationNotificationCallback_t, callbackReserveNotification);
		STEAM_CALLBACK(Steam, available_beacon_locations_updated, AvailableBeaconLocationsUpdated_t, callbackAvailableBeaconLocationsUpdated);
		STEAM_CALLBACK(Steam, active_beacons_updated, ActiveBeaconsUpdated_t, callbackActiveBeaconsUpdated);

		// Remote Play callbacks ////////////////
		STEAM_CALLBACK(Steam, remote_play_session_connected, SteamRemotePlaySessionConnected_t, callbackRemotePlaySessionConnected);
		STEAM_CALLBACK(Steam, remote_play_session_disconnected, SteamRemotePlaySessionDisconnected_t, callbackRemotePlaySessionDisconnected);

		// Remote Storage callbacks /////////////
		STEAM_CALLBACK(Steam, local_file_changed, RemoteStorageLocalFileChange_t, callbackLocalFileChanged);

		// Screenshot callbacks /////////////////
		STEAM_CALLBACK(Steam, screenshot_ready, ScreenshotReady_t, callbackScreenshotReady);
		STEAM_CALLBACK(Steam, screenshot_requested, ScreenshotRequested_t, callbackScreenshotRequested);

		// UGC callbacks ////////////////////////
		STEAM_CALLBACK(Steam, item_downloaded, DownloadItemResult_t, callbackItemDownloaded);
		STEAM_CALLBACK(Steam, item_installed, ItemInstalled_t, callbackItemInstalled);
		STEAM_CALLBACK(Steam, user_subscribed_items_list_changed, UserSubscribedItemsListChanged_t, callbackUserSubscribedItemsListChanged);

		// User callbacks ///////////////////////
		STEAM_CALLBACK(Steam, client_game_server_deny, ClientGameServerDeny_t, callbackClientGameServerDeny);
		STEAM_CALLBACK(Steam, game_web_callback, GameWebCallback_t, callbackGameWebCallback);
		STEAM_CALLBACK(Steam, get_auth_session_ticket_response, GetAuthSessionTicketResponse_t, callbackGetAuthSessionTicketResponse);
		STEAM_CALLBACK(Steam, ipc_failure, IPCFailure_t, callbackIPCFailure);
		STEAM_CALLBACK(Steam, licenses_updated, LicensesUpdated_t, callbackLicensesUpdated);
		STEAM_CALLBACK(Steam, microstransaction_auth_response, MicroTxnAuthorizationResponse_t, callbackMicrotransactionAuthResponse);
		STEAM_CALLBACK(Steam, steam_server_connected, SteamServersConnected_t, callbackSteamServerConnected);
		STEAM_CALLBACK(Steam, steam_server_disconnected, SteamServersDisconnected_t, callbackSteamServerDisconnected);
		STEAM_CALLBACK(Steam, validate_auth_ticket_response, ValidateAuthTicketResponse_t, callbackValidateAuthTicketResponse);

		// User stat callbacks //////////////////
		STEAM_CALLBACK(Steam, user_achievement_stored, UserAchievementStored_t, callbackUserAchievementStored);
		STEAM_CALLBACK(Steam, current_stats_received, UserStatsReceived_t, callbackCurrentStatsReceived);
		STEAM_CALLBACK(Steam, user_stats_stored, UserStatsStored_t, callbackUserStatsStored);
		STEAM_CALLBACK(Steam, user_stats_unloaded, UserStatsUnloaded_t, callbackUserStatsUnloaded);

		// Utility callbacks ////////////////////
		STEAM_CALLBACK(Steam, gamepad_text_input_dismissed, GamepadTextInputDismissed_t, callbackGamepadTextInputDismissed);
		STEAM_CALLBACK(Steam, ip_country, IPCountry_t, callbackIPCountry);
		STEAM_CALLBACK(Steam, low_power, LowBatteryPower_t, callbackLowPower);
		STEAM_CALLBACK(Steam, steam_api_call_completed, SteamAPICallCompleted_t, callbackSteamAPICallCompleted);
		STEAM_CALLBACK(Steam, steam_shutdown, SteamShutdown_t, callbackSteamShutdown);
		STEAM_CALLBACK(Steam, app_resuming_from_suspend, AppResumingFromSuspend_t, callbackAppResumingFromSuspend);
		STEAM_CALLBACK(Steam, floating_gamepad_text_input_dismissed, FloatingGamepadTextInputDismissed_t, callbackFloatingGamepadTextInputDismissed);

		// Video callbacks //////////////////////
		STEAM_CALLBACK(Steam, get_opf_settings_result, GetOPFSettingsResult_t, callbackGetOPFSettingsResult);
		STEAM_CALLBACK(Steam, get_video_result, GetVideoURLResult_t, callbackGetVideoResult);


		/////////////////////////////////////////
		// STEAM CALL RESULTS
		/////////////////////////////////////////
		//
		// Friends call results /////////////////
		CCallResult<Steam, ClanOfficerListResponse_t> callResultClanOfficerList;
		void request_clan_officer_list(ClanOfficerListResponse_t *call_data, bool io_failure);
		CCallResult<Steam, FriendsEnumerateFollowingList_t> callResultEnumerateFollowingList;
		void enumerate_following_list(FriendsEnumerateFollowingList_t *call_data, bool io_failure);
		CCallResult<Steam, FriendsGetFollowerCount_t> callResultFollowerCount;
		void get_follower_count(FriendsGetFollowerCount_t *call_data, bool io_failure);
		CCallResult<Steam, FriendsIsFollowing_t> callResultIsFollowing;
		void is_following(FriendsIsFollowing_t *call_data, bool io_failure);

		// Inventory call results ///////////////
		CCallResult<Steam, SteamInventoryEligiblePromoItemDefIDs_t> callResultEligiblePromoItemDefIDs;
		void inventory_eligible_promo_item(SteamInventoryEligiblePromoItemDefIDs_t *call_data, bool io_failure);
		CCallResult<Steam, SteamInventoryRequestPricesResult_t> callResultRequestPrices;
		void inventory_request_prices_result(SteamInventoryRequestPricesResult_t *call_data, bool io_failure);
		CCallResult<Steam, SteamInventoryStartPurchaseResult_t> callResultStartPurchase;
		void inventory_start_purchase_result(SteamInventoryStartPurchaseResult_t *call_data, bool io_failure);

		// Matchmaking call results /////////////
		CCallResult<Steam, LobbyCreated_t> callResultCreateLobby;
		void lobby_created(LobbyCreated_t *call_data, bool io_failure);
		CCallResult<Steam, LobbyMatchList_t> callResultLobbyList;
		void lobby_match_list(LobbyMatchList_t *call_data, bool io_failure);

		// Matchmaking Server call results //////
		void server_Responded(gameserveritem_t server);
		void server_Failed_To_Respond();

		// Parties call results /////////////////
		CCallResult<Steam, JoinPartyCallback_t> callResultJoinParty;
		void join_party(JoinPartyCallback_t *call_data, bool io_failure);
		CCallResult<Steam, CreateBeaconCallback_t> callResultCreateBeacon;
		void create_beacon(CreateBeaconCallback_t *call_data, bool io_failure);
		CCallResult<Steam, ChangeNumOpenSlotsCallback_t> callResultChangeNumOpenSlots;
		void change_num_open_slots(ChangeNumOpenSlotsCallback_t *call_data, bool io_failure);

		// Remote Storage call results //////////
		CCallResult<Steam, RemoteStorageFileReadAsyncComplete_t> callResultFileReadAsyncComplete;
		void file_read_async_complete(RemoteStorageFileReadAsyncComplete_t *call_data, bool io_failure);
		CCallResult<Steam, RemoteStorageFileShareResult_t> callResultFileShareResult;
		void file_share_result(RemoteStorageFileShareResult_t *call_data, bool io_failure);
		CCallResult<Steam, RemoteStorageFileWriteAsyncComplete_t> callResultFileWriteAsyncComplete;
		void file_write_async_complete(RemoteStorageFileWriteAsyncComplete_t *call_data, bool io_failure);
		CCallResult<Steam, RemoteStorageDownloadUGCResult_t> callResultDownloadUGCResult;
		void download_ugc_result(RemoteStorageDownloadUGCResult_t *call_data, bool io_failure);
		CCallResult<Steam, RemoteStorageUnsubscribePublishedFileResult_t> callResultUnsubscribeItem;
		void unsubscribe_item(RemoteStorageUnsubscribePublishedFileResult_t *call_data, bool io_failure);
		CCallResult<Steam, RemoteStorageSubscribePublishedFileResult_t> callResultSubscribeItem;
		void subscribe_item(RemoteStorageSubscribePublishedFileResult_t *call_data, bool io_failure);

		// UGC call results /////////////////////
		CCallResult<Steam, AddAppDependencyResult_t> callResultAddAppDependency;
		void add_app_dependency_result(AddAppDependencyResult_t *call_data, bool io_failure);
		CCallResult<Steam, AddUGCDependencyResult_t> callResultAddUGCDependency;
		void add_ugc_dependency_result(AddUGCDependencyResult_t *call_data, bool io_failure);
		CCallResult<Steam, CreateItemResult_t> callResultItemCreate;
		void item_created(CreateItemResult_t *call_data, bool io_failure);
		CCallResult<Steam, GetAppDependenciesResult_t> callResultGetAppDependencies;
		void get_app_dependencies_result(GetAppDependenciesResult_t *call_data, bool io_failure);
		CCallResult<Steam, DeleteItemResult_t> callResultDeleteItem;
		void item_deleted(DeleteItemResult_t *call_data, bool io_failure);
		CCallResult<Steam, GetUserItemVoteResult_t> callResultGetUserItemVote;
		void get_item_vote_result(GetUserItemVoteResult_t *call_data, bool io_failure);
		CCallResult<Steam, RemoveAppDependencyResult_t> callResultRemoveAppDependency;
		void remove_app_dependency_result(RemoveAppDependencyResult_t *call_data, bool io_failure);
		CCallResult<Steam, RemoveUGCDependencyResult_t> callResultRemoveUGCDependency;
		void remove_ugc_dependency_result(RemoveUGCDependencyResult_t *call_data, bool io_failure);
		CCallResult<Steam, SetUserItemVoteResult_t> callResultSetUserItemVote;
		void set_user_item_vote(SetUserItemVoteResult_t *call_data, bool io_failure);
		CCallResult<Steam, StartPlaytimeTrackingResult_t> callResultStartPlaytimeTracking;
		void start_playtime_tracking(StartPlaytimeTrackingResult_t *call_data, bool io_failure);
		CCallResult<Steam, SteamUGCQueryCompleted_t> callResultUGCQueryCompleted;
		void ugc_query_completed(SteamUGCQueryCompleted_t *call_data, bool io_failure);
		CCallResult<Steam, StopPlaytimeTrackingResult_t> callResultStopPlaytimeTracking;
		void stop_playtime_tracking(StopPlaytimeTrackingResult_t *call_data, bool io_failure);
		CCallResult<Steam, SubmitItemUpdateResult_t> callResultItemUpdate;
		void item_updated(SubmitItemUpdateResult_t *call_data, bool io_failure);
		CCallResult<Steam, UserFavoriteItemsListChanged_t> callResultFavoriteItemListChanged;
		void user_favorite_items_list_changed(UserFavoriteItemsListChanged_t *call_data, bool io_failure);
		CCallResult<Steam, WorkshopEULAStatus_t> callResultWorkshopEULAStatus;
		void workshop_eula_status(WorkshopEULAStatus_t *call_data, bool io_failure);

		// User call results ////////////////////
		CCallResult<Steam, DurationControl_t> callResultDurationControl;
		void duration_control(DurationControl_t *call_data, bool io_failure);
		CCallResult<Steam, EncryptedAppTicketResponse_t> callResultEncryptedAppTicketResponse;
		void encrypted_app_ticket_response(EncryptedAppTicketResponse_t *call_data, bool io_failure);
		CCallResult<Steam, SteamServerConnectFailure_t> callResultSteamServerConnectFailure;
		void steam_server_connect_failed(SteamServerConnectFailure_t *call_data, bool io_failure);
		CCallResult<Steam, StoreAuthURLResponse_t> callResultStoreAuthURLResponse;
		void store_auth_url_response(StoreAuthURLResponse_t *call_data, bool io_failure);

		// User stat call results ///////////////
		CCallResult<Steam, GlobalAchievementPercentagesReady_t> callResultGlobalAchievementPercentagesReady;
		void global_achievement_percentages_ready(GlobalAchievementPercentagesReady_t *call_data, bool io_failure);
		CCallResult<Steam, GlobalStatsReceived_t> callResultGetGlobalStatsReceived;
		void global_stats_received(GlobalStatsReceived_t *call_data, bool io_failure);
		CCallResult<Steam, LeaderboardFindResult_t> callResultFindLeaderboard;
		void leaderboard_find_result(LeaderboardFindResult_t *call_data, bool io_failure);
		CCallResult<Steam, LeaderboardScoresDownloaded_t> callResultEntries;
		void leaderboard_scores_downloaded(LeaderboardScoresDownloaded_t *call_data, bool io_failure);
		CCallResult<Steam, LeaderboardScoreUploaded_t> callResultUploadScore;
		void leaderboard_score_uploaded(LeaderboardScoreUploaded_t *call_data, bool io_failure);
		CCallResult<Steam, LeaderboardUGCSet_t> callResultLeaderboardUGCSet;
		void leaderboard_ugc_set(LeaderboardUGCSet_t *call_data, bool io_failure);
		CCallResult<Steam, NumberOfCurrentPlayers_t> callResultNumberOfCurrentPlayers;
		void number_of_current_players(NumberOfCurrentPlayers_t *call_data, bool io_failure);
		CCallResult<Steam, UserStatsReceived_t> callResultUserStatsReceived;
		void user_stats_received(UserStatsReceived_t *call_data, bool io_failure);

		// Utility call results /////////////////
		CCallResult<Steam, CheckFileSignature_t> callResultCheckFileSignature;
		void check_file_signature(CheckFileSignature_t *call_data, bool io_failure);
};
#endif // GODOTSTEAM_H
